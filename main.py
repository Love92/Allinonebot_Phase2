# ----------------------- main.py -----------------------
import os, asyncio, html
from datetime import timedelta
from dotenv import load_dotenv

from tg.bot import build_app
from utils.storage import Storage
from utils.time_utils import now_vn
from data.moon_tide import get_tide_events
from strategy.signal_generator import evaluate_signal
from tg.formatter import format_signal_report, format_daily_moon_tide_report
from tg.formatter import _beautify_report  # d√πng l·∫°i beautify ƒë·ªÉ tr√°nh Markdown/HTML l·ªói
from core.approval_flow import create_pending

# NEW: v√≤ng l·∫∑p M5 ri√™ng
from core.m5_reporter import m5_report_loop
# NEW: thu·∫≠t to√°n auto v√†o v√† tp
from core.auto_trade_engine import start_auto_loop

from telegram.error import BadRequest  # ƒë·ªÉ b·∫Øt l·ªói parse_mode

load_dotenv()

SCHEDULER_TICK_SEC    = int(os.getenv("SCHEDULER_TICK_SEC", "1"))
M30_SLOT_GRACE_SEC    = int(os.getenv("M30_SLOT_GRACE_SEC", "6"))
CHECKLIST_ENABLED     = os.getenv("CHECKLIST_ENABLED", "true").lower() in ("1","true","yes","on")
CHECKLIST_TIDE_ONLY   = os.getenv("CHECKLIST_TIDE_ONLY", "true").lower() in ("1","true","yes","on")
CHECKLIST_INTERVAL_MIN= int(os.getenv("CHECKLIST_INTERVAL_MIN", "30"))

# üîî Checklist r√∫t g·ªçn (Markdown)
SHORT_CHECKLIST = """
üìã *Checkist : 4 M√πa & 4 Phase Moon & 4 Tides c·ªßa HTGD : TH√ÇN ‚Äì T√ÇM ‚Äì TR√ç :*

üßç‚Äç‚ôÇÔ∏è *TH√ÇN ‚Äì Qu·∫£n l√Ω v·ªën (S·ªë 8 ‚Äì Tr∆∞·ªüng th√†nh)*
1. S·ª©c kh·ªèe b·∫°n c√≥ ƒëang ·ªïn kh√¥ng ? H√¥m nay ƒë√£ v·∫≠n ƒë·ªông min 15 ph√∫t ch∆∞a ?
2. Qu·∫£n l√Ω V·ªën l√†: Gi·ªØ ƒë·ªÅu vol ( V·ªën x ƒê√≤n B·∫©y , SL ch·ªãu ƒë∆∞·ª£c l√† gi·ªëng nhau)
3. Nguy√™n t·∫Øc QLV: 8:8:8/ (2:3:5) theo pytago trong m·ªôt m·∫°ng/ t·ªïng 8) 
4. S·ªë l·ªánh: T·ªëi ƒëa 8 l·ªánh/ng√†y - M·ªói gi·ªù th·ªßy tri·ªÅu max 2 l·ªánh
5. T·ª∑ l·ªá R:R > 1.3 (T·ªïng 4) : Ghi s·∫µn target/stop max 50%, kh√¥ng thay ƒë·ªïi sau khi v√†o l·ªánh, n·∫øu n√≥ ƒëi ng∆∞·ª£c Sl 50% v·∫´n OK - ph·∫£i ƒëo % ƒë·ªÉ t√≠nh ƒë√≤n b·∫©y
6. ƒê√≤n b·∫©y: X17,X26,X35,X44 (Nh·∫Øc v·ªÅ con s·ªë tr∆∞·ªüng th√†nh 8) : Th√¢n d√≤ X17 - 20% v·ªën, Tr√≠  50% T√≠n hi·ªáu t·ªët th√¨ X26 / X√°c su·∫•t cao, SL ng·∫Øn X35~X44

üßò‚Äç‚ôÇÔ∏è *T√ÇM ‚Äì T√¢m l√Ω (S·ªë 2 ‚Äì C√¢n b·∫±ng c·∫£m x√∫c)*
1. B·∫°n KO b·ªã stress hay cƒÉng th·∫≥ng ch·ª© ? H√¥m nay ƒë√£ thi·ªÅn min 15 ph√∫t ch∆∞a ?
2. T√¢m l√Ω tr∆∞·ªõc l·ªánh : Checklist tr∆∞·ªõc l·ªánh + Th·ªü 8 l·∫ßn ƒë·ªÉ t·ªânh th·ª©c tr∆∞·ªõc click
3. T√¢m l√Ω trong l·ªánh : N·∫øu ƒëang ho·∫£ng lo·∫°n "V√¥ t√°c", Ko ƒë∆∞·ª£c ƒëi th√™m l·ªánh ho·∫∑c DCA
4. T√¢m l√Ω sau l·ªánh: T·ªïng k·∫øt 1 ƒëi·ªÅu t·ªët + 1 b√†i h·ªçc m·ªói cu·ªëi ng√†y
5. T√¢m l√Ω h·ªìi ph·ª•c sau th·∫Øng/Thua: D·ª´ng giao d·ªãch 48h ( 2 ng√†y = con s·ªë th·ª≠ th√°ch) ƒë·ªÉ b√¨nh tƒ©nh t√¢m khi thua

üß† *TR√ç ‚Äì H·ªá th·ªëng giao d·ªãch (S·ªë 3 ‚Äì Ch·ªß ƒë·∫°o)*
1. B·∫°n c√≥ ƒëang t·ªânh t√°o v√† s√°ng su·ªët kh√¥ng ? H√¥m nay ƒë√£ thi·ªÅn min 15 ph√∫t ch∆∞a
2. Ch·ªâ BTC/USDT
3. Theo trend ch√≠nh (D, H4) - Sonic R " TREND IS YOUR FRIEND "
4. CTTT ƒêa Khung M30,M5/Fibo 50%/ Wyckoff -Phase-Spring/ M√¥ H√¨nh /KC-HT l√Ω t∆∞·ªüng/Volumn DGT/ SQ9 -9 c√¢y n·∫øn/ N√¢ng cao Sonic R+Elliot (ƒÉn s√≥ng 3)+Wyckoff
5. Phase trƒÉng - Bi·∫øn ƒë·ªông theo t·ª© xung theo ƒë·ªô r·ªçi (0 - 25 - 50 - 75 - 100)
6. V√πng gi·ªù th·ªßy tri·ªÅu ¬±1h " T√≠n hi·ªáu th∆∞·ªùng x√°c ƒë·ªãnh sau khi h·∫øt gi·ªù v√πng gi·ªù th·ªßy tri·ªÅu "
7. ƒê·ªìng pha RSI & EMA RSI (ƒëa khung)
8. Chi·∫øn l∆∞·ª£c 1 or ph√° n·ªÅn gi√° Down M5 or Lu√¥n h·ªèi ƒë√£ "C·∫†N CUNG" ch∆∞a ?
9. Stoch RSI c√¥ng t·∫Øc x√°c nh·∫≠n b·∫≠t ƒëa khung 

üìù *L·ªùi nh·∫Øc nh·ªü th√™m t·ª´ Nh√¢n s·ªë h·ªçc:*
10. S·ªë ch·ªß ƒë·∫°o 3: H·∫°n ch·∫ø m·∫°ng x√£ h·ªôi, t·∫≠p trung y√™u b·∫£n th√¢n, h·∫°n ch·∫ø ph√¢n t√°n nƒÉng l∆∞·ª£ng
11. 4 s·ªë 11: Vi·∫øt nh·∫≠t k√Ω, Ki·ªÉm tra checklist tr∆∞·ªõc v√†o l·ªánh, Ki√™n tr√¨ 1 h·ªá th·ªëng giao d·ªãch, H·∫°n ch·∫ø c·ªông ƒë·ªìng
12. Ki·∫øm c·ªßi 3 nƒÉm ƒë·ªët trong 1h r·∫•t nhi·ªÅu 
13. C·∫£nh gi√°c :" M√†y ƒë√£ b·ªã ch√°y nhi·ªÅu l·∫ßn v√¨ vi ph·∫°m kh√¥ng tu√¢n th·ªß giao d·ªãch v√† tr·∫£ th√π , DCA khi ho·∫£ng lo·∫°n " 
14. Kh√¥ng ƒë∆∞·ª£c v√†o l·ªánh b·∫±ng ƒëi·ªán tho·∫°i - Ph·∫£i ch·∫≠m l·∫°i - kh√¥ng h·∫•p t·∫•p "
15. " YOU ARE WHAT YOU REPEAT"
16. Bi√™n ƒë·ªô dao ƒë·ªông Khung B√© / H4/ D1 / W - ƒëang ntn - ƒêi·ªÅu ch·ªânh c√°i th√¨ sao ?
""".strip()

storage = Storage()

# ===== Helpers: g·ª≠i text ‚Äúan to√†n‚Äù cho Telegram =====
def _clean_htmlish(s: str) -> str:
    """Lo·∫°i b·ªè/ƒë·ªïi c√°c tag HTML kh√¥ng ƒë∆∞·ª£c Telegram h·ªó tr·ª£, chu·∫©n ho√° xu·ªëng d√≤ng."""
    if not isinstance(s, str):
        return s
    s = s.replace("<br/>", "\n").replace("<br>", "\n").replace("<hr>", "\n")
    # ƒë√¥i khi data ngu·ªìn c√≥ &nbsp;
    s = s.replace("&nbsp;", " ")
    return s

async def _send_safe(bot, chat_id: int, text: str):
    """
    G·ª≠i d·∫°ng HTML an to√†n; n·∫øu l·ªói Can't parse entities ‚Üí fallback g·ª≠i th∆∞·ªùng.
    """
    # 1) Beautify ƒë·ªÉ lo·∫°i d·∫•u so s√°nh, etc.
    pretty = _beautify_report(text or "")
    # 2) Lo·∫°i tag HTML kh√¥ng h·ªó tr·ª£
    pretty = _clean_htmlish(pretty)
    # 3) Escape to√†n b·ªô ƒë·ªÉ Telegram kh√¥ng hi·ªÉu nh·∫ßm entity
    safe_html = html.escape(pretty, quote=False)
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=safe_html,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    except BadRequest as e:
        # Fallback n·∫øu v·∫´n c√≤n l·ªói entity
        if "Can't parse entities" in str(e):
            await bot.send_message(
                chat_id=chat_id,
                text=pretty,            # ƒë√£ clean, kh√¥ng parse_mode
                disable_web_page_preview=True
            )
        else:
            raise

async def scheduler_loop_m30_h4(app):
    """
    CH·ªà x·ª≠ l√Ω H4/M30:
    - Auto report t·∫°i 9 m·ªëc: center ¬±0/¬±30/¬±60/¬±90/¬±120 ph√∫t
    - Evaluate H4‚ÜíM30 sau khi g·ª≠i report
    - ‚úÖ G·ª≠i checklist 30' m·ªôt l·∫ßn TRONG Tide Window, TR∆Ø·ªöC auto-report
    """
    bot = app.bot
    uid_env = os.getenv("TELEGRAM_CHAT_ID")
    uid = int(uid_env) if (uid_env and uid_env.isdigit()) else 0

    while True:
        try:
            st = storage.get_user(uid) if uid else None
            if not st:
                await asyncio.sleep(30); continue

            # Gi·ªõi h·∫°n theo ng√†y
            if st.today.count >= st.settings.max_orders_per_day:
                await asyncio.sleep(120); continue

            # T√¨m xem ƒëang ·ªü c·ª≠a s·ªï th·ªßy tri·ªÅu n√†o
            today_str = now_vn().strftime("%Y-%m-%d")
            tide_lines = get_tide_events(today_str) or []
            now_dt = now_vn()

            in_window, current_key, center_tide = False, None, None
            for line in tide_lines:
                parts = line.split()
                if len(parts) < 2 or ":" not in parts[1]:
                    continue
                label = parts[0].capitalize()
                hh, mm = parts[1].split(":")
                tide_dt = now_dt.replace(hour=int(hh), minute=int(mm), second=0, microsecond=0)
                start = tide_dt - timedelta(hours=float(st.settings.tide_window_hours))
                end   = tide_dt + timedelta(hours=float(st.settings.tide_window_hours))
                if start <= now_dt <= end:
                    in_window = True
                    current_key = f"{today_str} {parts[1]} {label}"
                    center_tide = tide_dt
                    break

            if not in_window:
                await asyncio.sleep(SCHEDULER_TICK_SEC); continue

            # 9 m·ªëc M30 quanh center
            slots = [center_tide + timedelta(minutes=30*k) for k in range(-4, 5)]
            for slot_dt in slots:
                if abs((now_dt - slot_dt).total_seconds()) <= M30_SLOT_GRACE_SEC:
                    slot_key = f"m30:{current_key}:{slot_dt.strftime('%H:%M')}"
                    st2 = storage.get_user(uid)

                    # ================= CHECKLIST (tr∆∞·ªõc /report) =================
                    if CHECKLIST_ENABLED:
                        # tag theo c·ª≠a s·ªï tide + m·ªëc ng√†y
                        cl_tag = f"checklist:{current_key}"
                        last_ts = st2.tide_window_trades.get(cl_tag, 0)
                        elapsed_min = 9e9
                        if last_ts:
                            elapsed_min = (now_dt.timestamp() - float(last_ts)) / 60.0

                        allow_tide = True if not CHECKLIST_TIDE_ONLY else in_window
                        if allow_tide and (not last_ts or elapsed_min >= CHECKLIST_INTERVAL_MIN):
                            try:
                                await bot.send_message(
                                    chat_id=uid,
                                    text=SHORT_CHECKLIST,
                                    parse_mode="Markdown",  # checklist l√† Markdown
                                    disable_web_page_preview=True,
                                )
                            finally:
                                st2 = storage.get_user(uid)
                                st2.tide_window_trades[cl_tag] = now_dt.timestamp()
                                storage.put_user(uid, st2)
                    # ============================================================

                    if st2.tide_window_trades.get(slot_key, 0) == 0:
                        # Daily block
                        daily_raw = format_daily_moon_tide_report(today_str, float(st.settings.tide_window_hours))
                        # TA block
                        sym = st.settings.pair.replace("/", "")
                        loop = asyncio.get_event_loop()
                        try:
                            res = await loop.run_in_executor(
                                None, lambda: evaluate_signal(sym, tide_window_hours=float(st.settings.tide_window_hours))
                            )
                        except TypeError:
                            res = await loop.run_in_executor(None, lambda: evaluate_signal(sym))
                        ta_text = (res.get("text") if isinstance(res, dict) else None) or "‚ö†Ô∏è Kh√¥ng t·∫°o ƒë∆∞·ª£c snapshot k·ªπ thu·∫≠t."

                        # Gh√©p & g·ª≠i an to√†n (HTML-safe ‚Üí fallback)
                        merged = (daily_raw or "").strip() + "\n\n" + (ta_text or "").strip()
                        await _send_safe(bot, uid, merged)

                        st2 = storage.get_user(uid)
                        st2.tide_window_trades[slot_key] = 1
                        storage.put_user(uid, st2)
                    break

        except Exception as e:
            try:
                # l·ªói n√†y g·ª≠i th·∫≥ng text th∆∞·ªùng ƒë·ªÉ ch·∫Øc ch·∫Øn kh√¥ng d√≠nh parse
                await bot.send_message(chat_id=uid, text=f"üö® L·ªói scheduler(M30/H4): {e}")
            except:
                pass

        await asyncio.sleep(SCHEDULER_TICK_SEC)

if __name__ == "__main__":
    app = build_app()

    # (Tu·ª≥ ch·ªçn) t·∫°o event loop m·ªõi ƒë·ªÉ h·∫øt DeprecationWarning
    import asyncio as _asyncio
    loop = _asyncio.new_event_loop()
    _asyncio.set_event_loop(loop)

    # ‚úÖ Gi·ªØ 2 task H4/M30 v√† AUTO nh∆∞ b·∫°n ƒëang ch·∫°y
    loop.create_task(scheduler_loop_m30_h4(app))        # H4/M30
    # ‚ùå KH√îNG t·∫°o task M5 ·ªü ƒë√¢y (ƒë√£ t·∫°o trong build_app via app.create_task)
    # loop.create_task(m5_report_loop(app, storage))
    loop.create_task(start_auto_loop(app, storage))     # AUTO Trade_engine.py ho·∫°t ƒë·ªông 

    use_webhook = os.getenv("USE_WEBHOOK", "false").lower() == "true"
    base_url    = os.getenv("WEBHOOK_URL") or os.getenv("RENDER_EXTERNAL_URL")
    port        = int(os.getenv("PORT", "8443"))
    token       = os.getenv("TELEGRAM_BOT_TOKEN")
    webhook_path= os.getenv("WEBHOOK_PATH", token or "")

    if use_webhook and base_url:
        base_url = base_url.rstrip("/")
        full_url = f"{base_url}/{webhook_path.lstrip('/')}"
        print(f"Running WEBHOOK on 0.0.0.0:{port} ‚Üí {full_url}")
        app.run_webhook(listen="0.0.0.0", port=port, url_path=webhook_path, webhook_url=full_url)
    else:
        print("Running POLLING mode")
        app.run_polling()
# ----------------------- /main.py -----------------------
