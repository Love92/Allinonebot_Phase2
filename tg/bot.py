# ----------------------- tg/bot.py -----------------------
from __future__ import annotations
import os, asyncio, html
from datetime import datetime, timedelta
from typing import Optional

from telegram import Update, Bot
from telegram import constants
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, Application

from config.settings import (
    TELEGRAM_BOT_TOKEN,
    DEFAULT_MODE,
    TELEGRAM_BROADCAST_BOT_TOKEN,
    TELEGRAM_BROADCAST_CHAT_ID,
)

from utils.storage import Storage
from utils.time_utils import now_vn, TOKYO_TZ
from strategy.signal_generator import evaluate_signal, tide_window_now
from strategy.m5_strategy import m5_snapshot, m5_entry_check
from core.trade_executor import ExchangeClient, calc_qty, auto_sl_by_leverage
from core.trade_executor import close_position_on_all, close_position_on_account # ==== /close (ƒëa t√†i kho·∫£n: Binance/BingX/...) ====
from tg.formatter import format_signal_report, format_daily_moon_tide_report
from core.approval_flow import create_pending

# V√≤ng n·ªÅn
from core.auto_trade_engine import start_auto_loop
from core.m5_reporter import m5_report_loop

# NEW: d√πng resolver P1‚ÄìP4 theo %illum + h∆∞·ªõng
from data.moon_tide import resolve_preset_code

# ================== Global state ==================
storage = Storage()
ex = ExchangeClient()

# ==== QUOTA helpers: 2 l·ªánh / c·ª≠a s·ªï th·ªßy tri·ªÅu, 8 l·ªánh / ng√†y (g·ªôp m·ªçi mode) ====
def _quota_precheck_and_label(st):
    now = now_vn()
    twin = tide_window_now(now, hours=float(st.settings.tide_window_hours))
    if not twin:
        return False, "‚è≥ Ngo√†i khung th·ªßy tri·ªÅu.", None, None, 0
    start, end = twin
    tide_label = f"{start.strftime('%H:%M')}‚Äì{end.strftime('%H:%M')}"
    tkey = (start + (end - start) / 2).strftime("%Y-%m-%d %H:%M")
    used = int(st.tide_window_trades.get(tkey, 0))
    if st.today.count >= st.settings.max_orders_per_day:
        return False, f"üö´ V∆∞·ª£t gi·ªõi h·∫°n ng√†y ({st.settings.max_orders_per_day}).", tide_label, tkey, used
    if used >= st.settings.max_orders_per_tide_window:
        return False, f"üö´ C·ª≠a s·ªï th·ªßy tri·ªÅu hi·ªán t·∫°i ƒë√£ ƒë·ªß {used}/{st.settings.max_orders_per_tide_window} l·ªánh.", tide_label, tkey, used
    return True, "", tide_label, tkey, used

def _quota_commit(st, tkey, used, uid):
    st.today.count += 1
    st.tide_window_trades[tkey] = used + 1
    storage.put_user(uid, st)


# ================== Helpers ==================
def _beautify_report(s: str) -> str:
    if not isinstance(s, str):
        return s
    s = s.replace("&lt;=", "‚â§").replace("&gt;=", "‚â•")
    s = s.replace("&lt;", "Ôºú").replace("&gt;", "Ôºû")
    s = s.replace("<=", "‚â§").replace(">=", "‚â•")
    s = s.replace(" EMA34<EMA89", " EMA34ÔºúEMA89")
    s = s.replace(" Close<EMA34", " CloseÔºúEMA34")
    s = s.replace(" EMA34>EMA89", " EMA34ÔºûEMA89")
    s = s.replace(" Close>EMA34", " CloseÔºûEMA34")
    s = s.replace("zone Z1( <30)", "zone Z1 [<30]") \
         .replace("zone Z2(30-45)", "zone Z2 [30‚Äì45]") \
         .replace("zone Z3(45-55)", "zone Z3 [45‚Äì55]") \
         .replace("zone Z4(55-70)", "zone Z4 [55‚Äì70]") \
         .replace("zone Z5(>70 )", "zone Z5 [>70]") \
         .replace("zone Z5(>70)", "zone Z5 [>70]")
    s = s.replace("vol>=MA20", "vol ‚â• MA20") \
         .replace("vol<=MA20", "vol ‚â§ MA20") \
         .replace("wick>=50%", "wick ‚â• 50%") \
         .replace("wick<=50%", "wick ‚â§ 50%")
    return s
# === Telegram helper: split long HTML safely (<4096 chars) ===
def _esc(s: str) -> str:
    return html.escape(s or "", quote=False)
TELEGRAM_HTML_LIMIT = 4096
_SAFE_BUDGET = 3500  # ch·ª´a bi√™n cho th·∫ª HTML & escape

async def _send_long_html(update, context, text: str):
    """
    G·ª≠i chu·ªói HTML d√†i th√†nh nhi·ªÅu tin, tr√°nh l·ªói 4096 c·ªßa Telegram.
    D√πng context.bot (PTB v20+), kh√¥ng d√πng update.message.bot.
    """
    chat_id = update.effective_chat.id
    txt = text or ""
    parts = txt.split("\n\n")

    buf = ""
    for p in parts:
        candidate = (buf + ("\n\n" if buf else "") + p)
        if len(candidate) <= _SAFE_BUDGET:
            buf = candidate
        else:
            if buf:
                await context.bot.send_message(
                    chat_id=chat_id, text=buf,
                    parse_mode="HTML", disable_web_page_preview=True
                )
            # n·∫øu p v·∫´n qu√° d√†i ‚Üí c·∫Øt c·ª©ng
            while len(p) > _SAFE_BUDGET:
                chunk = p[:_SAFE_BUDGET]
                await context.bot.send_message(
                    chat_id=chat_id, text=chunk,
                    parse_mode="HTML", disable_web_page_preview=True
                )
                p = p[_SAFE_BUDGET:]
            buf = p

    if buf:
        await context.bot.send_message(
            chat_id=chat_id, text=buf,
            parse_mode="HTML", disable_web_page_preview=True
        )


# ==== BROADCAST (format th·ªëng nh·∫•t, l·∫•y Entry hi·ªÉn th·ªã t·ª´ BINANCE SPOT) ====
_bcast_bot: Bot | None = None
if TELEGRAM_BROADCAST_BOT_TOKEN:
    try:
        _bcast_bot = Bot(token=TELEGRAM_BROADCAST_BOT_TOKEN)
    except Exception:
        _bcast_bot = None

async def _broadcast_html(text: str) -> None:
    if not (_bcast_bot and TELEGRAM_BROADCAST_CHAT_ID):
        return
    try:
        await _bcast_bot.send_message(
            chat_id=int(TELEGRAM_BROADCAST_CHAT_ID),
            text=text,
            parse_mode="HTML",
            disable_web_page_preview=True,
        )
    except Exception:
        pass

def _binance_spot_entry(pair: str) -> float:
    """
    L·∫•y gi√° hi·ªÉn th·ªã t·ª´ BINANCE SPOT (v√≠ d·ª• BTCUSDT close). Kh√¥ng d√πng cho kh·ªõp l·ªánh.
    """
    try:
        from data.market_data import get_klines
        sym = pair.replace("/", "").replace(":USDT", "")
        df = get_klines(symbol=sym, interval="1m", limit=2)
        if df is not None and len(df) > 0:
            return float(df.iloc[-1]["close"])
    except Exception:
        pass
    return 0.0

def _fmt_exec_broadcast(
    *, pair: str, side: str, acc_name: str, ex_id: str,
    lev: int, risk: float, qty: float, entry_spot: float,
    sl: float | None, tp: float | None,
    tide_label: str | None = None, mode_label: str = "AUTO",
) -> str:
    lines = [
        f"üöÄ <b>EXECUTED</b> | <b>{_esc(pair)}</b> <b>{_esc(side.upper())}</b>",
        f"‚Ä¢ Mode: {mode_label}",
        f"‚Ä¢ Account: {_esc(acc_name)} ({_esc(ex_id)})",
        f"‚Ä¢ Risk {risk:.1f}% | Lev x{lev}",
        f"‚Ä¢ Entry(SPOT)‚âà{entry_spot:.2f} | Qty={qty:.6f}",
        f"‚Ä¢ SL={sl:.2f}" if sl else "‚Ä¢ SL=‚Äî",
        f"‚Ä¢ TP={tp:.2f}" if tp else "‚Ä¢ TP=‚Äî",
        f"‚Ä¢ Tide: {tide_label}" if tide_label else "",
    ]
    return "\n".join([l for l in lines if l])


def _uid(update: Update) -> int:
    return update.effective_user.id

def _admin_uid() -> Optional[int]:
    val = (os.getenv("ADMIN_USER_ID") or "").strip()
    if val.isdigit():
        return int(val)
    try:
        a = storage.data.get("_admin_uid")
        return int(a) if a else None
    except Exception:
        return None

def _is_admin(uid: int) -> bool:
    a = _admin_uid()
    return (a is not None) and (uid == a)

def _bool_str(v):
    return "true" if (isinstance(v, bool) and v) or (isinstance(v, str) and v.strip().lower() in ("1","true","yes","on","y")) else "false"

def _env_or_runtime(k: str, default: str = "‚Äî") -> str:
    """
    D√πng ƒë·ªÉ HI·ªÇN TH·ªä gi√° tr·ªã hi·ªán t·∫°i trong /help:
    - ∆Øu ti√™n ENV
    - Fallback sang runtime trong core.auto_trade_engine n·∫øu c√≥
    """
    v = os.getenv(k)
    if v is not None:
        return v
    try:
        from core import auto_trade_engine as ae
        if hasattr(ae, k):
            val = getattr(ae, k)
            if isinstance(val, bool): return "true" if val else "false"
            return str(val)
    except Exception:
        pass
    return default

# ================== PRESETS (P1‚ÄìP4 theo Moon ‚Äî % ƒë·ªô r·ªçi + h∆∞·ªõng) ==================
# P1: 0‚Äì25% (quanh New) | P2: 25‚Äì75% & waxing | P3: 75‚Äì100% (quanh Full) | P4: 25‚Äì75% & waning
# Theo y√™u c·∫ßu: P1=P3 (trend + Sonic on + late-only 0.5~2.5h, tide 2.5h, TP 5.5h)
#               P2=P4 (Sonic off; c√°c tham s·ªë c√≤n l·∫°i gi·ªëng nhau trong c·∫∑p)
PRESETS = {
    # P1 ‚Äî 0‚Äì25%: quanh New ‚Äî Waning Crescent ‚Üî New ‚Üî Waxing Crescent
    # Trend/ti·∫øp di·ªÖn + v√†o mu·ªôn ƒë·ªÉ an to√†n
    "P1": {
        "SONIC_MODE": "weight", "SONIC_WEIGHT": 1.0,

        # Entry timing (th·ªßy tri·ªÅu)
        "ENTRY_LATE_PREF": False,
        "ENTRY_LATE_ONLY": True,
        "ENTRY_LATE_FROM_HRS": 0.5,
        "ENTRY_LATE_TO_HRS": 2.5,
        "TIDE_WINDOW_HOURS": 2.5,
        # TP theo th·ªùi gian (r√∫t ng·∫Øn)
        "TP_TIME_HOURS": 5.5,
        # NEW ‚Äî guard l·∫≠t h∆∞·ªõng M30 quanh m·ªëc th·ªßy tri·ªÅu
        "M30_FLIP_GUARD": True,
        "M30_STABLE_MIN_SEC": 1800, # after 30min tide center
		# Extreme guard defaults
        "EXTREME_BLOCK_ON": True,
        "EXTREME_RSI_OB": 70.0,
        "EXTREME_RSI_OS": 30.0,
        "EXTREME_STOCH_OB": 90.0,
        "EXTREME_STOCH_OS": 10.0,


        # M5 gate (gi·ªØ logic m·∫∑c ƒë·ªãnh, c√≥ th·ªÉ v·∫∑n th√™m b·∫±ng /setenv khi c·∫ßn)
        "M5_STRICT": False, "M5_RELAX_KIND": "either",
        "M5_WICK_PCT": 0.50,
        "M5_VOL_MULT_RELAX": 1.00, "M5_VOL_MULT_STRICT": 1.10,
        "M5_REQUIRE_ZONE_STRICT": True,
        "M5_LOOKBACK_RELAX": 3, "M5_RELAX_NEED_CURRENT": False,
        "M5_LOOKBACK_STRICT": 6, "ENTRY_SEQ_WINDOW_MIN": 30,
        # M5 entry spacing / second entry
        "M5_MIN_GAP_MIN": 15, # kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa 2 entry M5 (ph√∫t)
        "M5_GAP_SCOPED_TO_WINDOW": True, # true ‚Üí reset gap theo t·ª´ng tide window
        "ALLOW_SECOND_ENTRY": True,      # cho ph√©p v√†o entry th·ª© 2 n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán
        "M5_SECOND_ENTRY_MIN_RETRACE_PCT": 0.3, # retrace % t·ªëi thi·ªÉu ƒë·ªÉ entry l·∫ßn 2

        # C√°c ng∆∞·ª°ng HTF m·∫∑c ƒë·ªãnh (gi·ªØ nguy√™n nh∆∞ c≈©)
        "RSI_OB": 65, "RSI_OS": 35, "DELTA_RSI30_MIN": 10,
        "SIZE_MULT_STRONG": 1.0, "SIZE_MULT_MID": 0.7, "SIZE_MULT_CT": 0.4,
    },

    # P2 ‚Äî 25‚Äì75% & waxing: Waxing Crescent ‚Üî First Quarter ‚Üî Waxing Gibbous
    # Momentum/breakout ‚Äî kh√¥ng √©p late-only, Sonic OFF theo y√™u c·∫ßu
    "P2": {
        "SONIC_MODE": "off",

        "ENTRY_LATE_PREF": False,
        "ENTRY_LATE_ONLY": True,
        "ENTRY_LATE_FROM_HRS": 0.5,     # ƒë·ªÉ ƒë·ªìng b·ªô ƒë·ªãnh d·∫°ng; kh√¥ng d√πng n·∫øu ONLY=false
        "ENTRY_LATE_TO_HRS": 2.5,
        "TIDE_WINDOW_HOURS": 2.5,       # cho th·ªëng nh·∫•t c·∫∑p P2=P4
        "TP_TIME_HOURS": 5.5,           # cho th·ªëng nh·∫•t c·∫∑p P2=P4
        
        # NEW ‚Äî guard l·∫≠t h∆∞·ªõng M30 quanh m·ªëc th·ªßy tri·ªÅu
        "M30_FLIP_GUARD": True,
        "M30_STABLE_MIN_SEC": 1800, # after 30min tide center    
	    # Extreme guard defaults
        "EXTREME_BLOCK_ON": True,
        "EXTREME_RSI_OB": 70.0,
        "EXTREME_RSI_OS": 30.0,
        "EXTREME_STOCH_OB": 90.0,
        "EXTREME_STOCH_OS": 10.0,

        "M5_STRICT": False, "M5_RELAX_KIND": "either",
        "M5_WICK_PCT": 0.50,
        "M5_VOL_MULT_RELAX": 1.00, "M5_VOL_MULT_STRICT": 1.10,
        "M5_REQUIRE_ZONE_STRICT": True,
        "M5_LOOKBACK_RELAX": 3, "M5_RELAX_NEED_CURRENT": False,
        "M5_LOOKBACK_STRICT": 6, "ENTRY_SEQ_WINDOW_MIN": 30,
        # M5 entry spacing / second entry
        "M5_MIN_GAP_MIN": 15, # kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa 2 entry M5 (ph√∫t)
        "M5_GAP_SCOPED_TO_WINDOW": True, # true ‚Üí reset gap theo t·ª´ng tide window
        "ALLOW_SECOND_ENTRY": True,      # cho ph√©p v√†o entry th·ª© 2 n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán
        "M5_SECOND_ENTRY_MIN_RETRACE_PCT": 0.3, # retrace % t·ªëi thi·ªÉu ƒë·ªÉ entry l·∫ßn 2
        
        
        "RSI_OB": 65, "RSI_OS": 35, "DELTA_RSI30_MIN": 10,
        "SIZE_MULT_STRONG": 1.0, "SIZE_MULT_MID": 0.7, "SIZE_MULT_CT": 0.4,
    },

    # P3 ‚Äî 75‚Äì100%: Waxing Gibbous ‚Üî Full ‚Üî Waning Gibbous
    # Theo y√™u c·∫ßu: gi·ªëng P1 (trend + Sonic on + late-only 0.5~2.5h)
    "P3": {
        "SONIC_MODE": "weight", "SONIC_WEIGHT": 1.0,

        "ENTRY_LATE_PREF": False,
        "ENTRY_LATE_ONLY": True,
        "ENTRY_LATE_FROM_HRS": 0.5,
        "ENTRY_LATE_TO_HRS": 2.5,
        "TIDE_WINDOW_HOURS": 2.5,
        "TP_TIME_HOURS": 5.5,
        
        # NEW ‚Äî guard l·∫≠t h∆∞·ªõng M30 quanh m·ªëc th·ªßy tri·ªÅu
        "M30_FLIP_GUARD": True,
        "M30_STABLE_MIN_SEC": 1800, # after 30min tide center
		# Extreme guard defaults
        "EXTREME_BLOCK_ON": True,
        "EXTREME_RSI_OB": 70.0,
        "EXTREME_RSI_OS": 30.0,
        "EXTREME_STOCH_OB": 90.0,
        "EXTREME_STOCH_OS": 10.0,

        "M5_STRICT": False, "M5_RELAX_KIND": "either",
        "M5_WICK_PCT": 0.50,
        "M5_VOL_MULT_RELAX": 1.00, "M5_VOL_MULT_STRICT": 1.10,
        "M5_REQUIRE_ZONE_STRICT": True,
        "M5_LOOKBACK_RELAX": 3, "M5_RELAX_NEED_CURRENT": False,
        "M5_LOOKBACK_STRICT": 6, "ENTRY_SEQ_WINDOW_MIN": 30,
        # M5 entry spacing / second entry
        "M5_MIN_GAP_MIN": 15, # kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa 2 entry M5 (ph√∫t)
        "M5_GAP_SCOPED_TO_WINDOW": True, # true ‚Üí reset gap theo t·ª´ng tide window
        "ALLOW_SECOND_ENTRY": True,      # cho ph√©p v√†o entry th·ª© 2 n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán
        "M5_SECOND_ENTRY_MIN_RETRACE_PCT": 0.3, # retrace % t·ªëi thi·ªÉu ƒë·ªÉ entry l·∫ßn 2
        
        "RSI_OB": 65, "RSI_OS": 35, "DELTA_RSI30_MIN": 10,
        "SIZE_MULT_STRONG": 1.0, "SIZE_MULT_MID": 0.7, "SIZE_MULT_CT": 0.4,
    },

    # P4 ‚Äî 25‚Äì75% & waning: Waning Gibbous ‚Üî Last Quarter ‚Üî Waning Crescent
    # Theo y√™u c·∫ßu: gi·ªëng P2 (Sonic OFF; kh√¥ng √©p late-only)
    "P4": {
        "SONIC_MODE": "off",

        "ENTRY_LATE_PREF": False,
        "ENTRY_LATE_ONLY": True,
        "ENTRY_LATE_FROM_HRS": 0.5,
        "ENTRY_LATE_TO_HRS": 2.5,
        "TIDE_WINDOW_HOURS": 2.5,
        "TP_TIME_HOURS": 5.5,
        
        # NEW ‚Äî guard l·∫≠t h∆∞·ªõng M30 quanh m·ªëc th·ªßy tri·ªÅu
        "M30_FLIP_GUARD": True,
        "M30_STABLE_MIN_SEC": 1800, # after 30min tide center
		# Extreme guard defaults
        "EXTREME_BLOCK_ON": True,
        "EXTREME_RSI_OB": 70.0,
        "EXTREME_RSI_OS": 30.0,
        "EXTREME_STOCH_OB": 90.0,
        "EXTREME_STOCH_OS": 10.0,

        "M5_STRICT": False, "M5_RELAX_KIND": "either",
        "M5_WICK_PCT": 0.50,
        "M5_VOL_MULT_RELAX": 1.00, "M5_VOL_MULT_STRICT": 1.10,
        "M5_REQUIRE_ZONE_STRICT": True,
        "M5_LOOKBACK_RELAX": 3, "M5_RELAX_NEED_CURRENT": False,
        "M5_LOOKBACK_STRICT": 6, "ENTRY_SEQ_WINDOW_MIN": 30,
        # M5 entry spacing / second entry
        "M5_MIN_GAP_MIN": 15, # kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa 2 entry M5 (ph√∫t)
        "M5_GAP_SCOPED_TO_WINDOW": True, # true ‚Üí reset gap theo t·ª´ng tide window
        "ALLOW_SECOND_ENTRY": True,      # cho ph√©p v√†o entry th·ª© 2 n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán
        "M5_SECOND_ENTRY_MIN_RETRACE_PCT": 0.3, # retrace % t·ªëi thi·ªÉu ƒë·ªÉ entry l·∫ßn 2
        
        "RSI_OB": 65, "RSI_OS": 35, "DELTA_RSI30_MIN": 10,
        "SIZE_MULT_STRONG": 1.0, "SIZE_MULT_MID": 0.7, "SIZE_MULT_CT": 0.4,
    },
}


async def _apply_preset_and_reply(update: Update, preset_name: str, header: str = ""):
    preset = PRESETS[preset_name]
    for k, v in preset.items():
        os.environ[k] = _bool_str(v) if isinstance(v, bool) else str(v)

    applied_runtime = False
    try:
        from core import auto_trade_engine as ae
        apply_fn = getattr(ae, "apply_runtime_overrides", None)
        if callable(apply_fn):
            apply_fn({k: os.environ[k] for k in preset.keys()})
            applied_runtime = True
        else:
            for k, sval in os.environ.items():
                if k in preset and hasattr(ae, k):
                    typ = type(getattr(ae, k))
                    try:
                        if typ is bool:
                            setattr(ae, k, sval.strip().lower() in ("1","true","yes","on"))
                        elif typ is int:
                            setattr(ae, k, int(float(sval)))
                        elif typ is float:
                            setattr(ae, k, float(sval))
                        else:
                            setattr(ae, k, sval)
                        applied_runtime = True
                    except Exception:
                        pass
    except Exception:
        pass

    lines = [f"{k}={os.environ[k]}" for k in sorted(preset.keys())]
    msg = (header + "\n" if header else "") + f"‚úÖ ƒê√£ √°p d·ª•ng preset <b>{preset_name}</b>:\n" + "\n".join(lines)
    if applied_runtime:
        msg += "\n(ƒë√£ √°p d·ª•ng runtime cho AUTO engine)."
    else:
        msg += "\n(c√≥ th·ªÉ c·∫ßn kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ √°p d·ª•ng ho√†n to√†n)."
    await update.message.reply_text(msg, parse_mode="HTML")

# ================== Commands ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _uid(update)
    st = storage.get_user(uid)
    if not st.settings.mode:
        st.settings.mode = DEFAULT_MODE
        storage.put_user(uid, st)
    if _admin_uid() is None:
        storage.data["_admin_uid"] = uid
        storage.persist()

    await update.message.reply_text(
        "üëã Xin ch√†o! Bot Moon & Tide ƒë√£ s·∫µn s√†ng.\n\n"
        "üìå <b>Mode giao d·ªãch:</b>\n"
        "‚Ä¢ <code>/mode auto</code> ‚Äî Bot t·ª± ƒë·ªông v√†o l·ªánh khi ƒë·ªß ƒëi·ªÅu ki·ªán.\n"
        "‚Ä¢ <code>/mode manual</code> ‚Äî Bot ch·ªâ b√°o t√≠n hi·ªáu, c·∫ßn /approve ho·∫∑c /reject m·ªõi v√†o l·ªánh.\n"
        "‚Ä¢ <code>/order</code> ‚Äî V√†o l·ªánh th·ªß c√¥ng ngay (theo %risk/leverage).\n\n"
        "üìå <b>ƒê√≥ng l·ªánh (/close):</b>\n"
        "‚Ä¢ <code>/close</code> ho·∫∑c <code>/close 100</code> ‚Äî ƒê√≥ng to√†n b·ªô & h·ªßy TP/SL ƒëang treo.\n"
        "‚Ä¢ <code>/close 50</code> ‚Äî ƒê√≥ng 50% v·ªã th·∫ø, v·∫´n gi·ªØ TP/SL ph·∫ßn c√≤n l·∫°i.\n"
        "‚Ä¢ <code>/close 30 bingx_test</code> ‚Äî ƒê√≥ng 30% tr√™n account bingx_test.\n\n"
        "üìå <b>Command ch√≠nh:</b>\n"
        "/aboutme ‚Äî tri·∫øt l√Ω TH√ÇN‚ÄìT√ÇM‚ÄìTR√ç & checklist\n"
        "/journal ‚Äî m·ªü form nh·∫≠t k√Ω giao d·ªãch\n"
        "/recovery_checklist ‚Äî checklist ph·ª•c h·ªìi sau thua l·ªó\n"
        "/settings ‚Äî c√†i ƒë·∫∑t: pair, % v·ªën, leverage\n"
        "/tidewindow ‚Äî xem/ƒë·ªïi ¬± gi·ªù quanh th·ªßy tri·ªÅu\n"
        "/report ‚Äî g·ª≠i report H4‚ÜíM30 (+ M5 filter)\n"
        "/status ‚Äî tr·∫°ng th√°i bot & v·ªã th·∫ø\n"
        "/approve <code>id</code> /reject <code>id</code> ‚Äî duy·ªát t√≠n hi·ªáu (manual)\n"
        "/m5report start|stop ‚Äî auto M5 snapshot m·ªói 5 ph√∫t\n"
        "/daily ‚Äî b√°o c√°o Moon & Tide trong ng√†y\n"
        "/autolog ‚Äî log AUTO (tick M5 g·∫ßn nh·∫•t)\n"
        "/preset <name>|auto ‚Äî preset theo Moon Phase (P1‚ÄìP4)\n"
        "/setenv KEY VALUE ‚Äî ch·ªânh ENV runtime\n"
        "/setenv_status ‚Äî xem c·∫•u h√¨nh ENV/runtime\n\n"
        "üí° D√πng <code>/help</code> ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt.",
        parse_mode="HTML"
    )


async def help_cmd(update, context):
    # helper show ENV/runtimes trong /help
    def v(k, d="‚Äî"):
        return _env_or_runtime(k, d)

    # /help short | /help s -> b·∫£n r√∫t g·ªçn
    args = context.args if hasattr(context, "args") else []
    short_mode = bool(args and args[0].lower() in ("short", "s"))

    if short_mode:
        # Kh·ªëi b·ªï sung (ƒë√£ escape HTML & g·ªçn ƒë·ªÉ kh√¥ng v∆∞·ª£t gi·ªõi h·∫°n Telegram)
        extra = (
            "<b>Presets (theo Moon ‚Äî ƒë·∫∑t t√™n m·ªõi):</b>\n"
            "‚Ä¢ P1 ‚Äî 0‚Äì25% (quanh New): Waning Crescent ‚ÜîÔ∏è New ‚ÜîÔ∏è Waxing Crescent\n"
            "‚Ä¢ P2 ‚Äî 25‚Äì75% &amp; waxing: Waxing Crescent ‚ÜîÔ∏è First Quarter ‚ÜîÔ∏è Waxing Gibbous\n"
            "‚Ä¢ P3 ‚Äî 75‚Äì100% (quanh Full): Waxing Gibbous ‚ÜîÔ∏è Full ‚ÜîÔ∏è Waning Gibbous\n"
            "‚Ä¢ P4 ‚Äî 25‚Äì75% &amp; waning: Waning Gibbous ‚ÜîÔ∏è Last Quarter ‚ÜîÔ∏è Waning Crescent\n\n"
            "<b>Auto theo Moon (P1‚ÄìP4):</b>\n"
            "‚Ä¢ /preset auto ƒë·ªÉ ƒë·ªïi nhanh theo Moon (P1‚ÄìP4)\n"
            "‚Ä¢ /preset P1|P2|P3|P4 ‚Üí ch·ªçn th·ªß c√¥ng preset P-code.\n\n"
            "<b>Scoring H4/M30 (t√≥m t·∫Øt, ƒë√£ n·ªõi logic theo zone &amp; h∆∞·ªõng):</b>\n"
            "‚Ä¢ Z2/Z4 = +2 (·ªßng h·ªô h∆∞·ªõng ƒëi l√™n/xu·ªëng T√ôY v·ªã tr√≠ RSI vs EMA-RSI v√† h∆∞·ªõng di chuy·ªÉn v√†o zone).\n"
            "‚Ä¢ Z3 (45‚Äì55) = ‚àí1 (barrier, d·ªÖ sideway/ƒë·∫£o, c·∫ßn cross ƒë·ªÉ x√°c nh·∫≠n).\n"
            "‚Ä¢ RSI√óEMA(RSI) cross = +2; align ·ªïn ƒë·ªãnh = +1.\n"
            "‚Ä¢ Stoch RSI: b·∫≠t ‚Üë t·ª´ &lt;20 / g√£y ‚Üì t·ª´ &gt;80 = +2; b·ª©t qua 50 = +1.\n"
            "‚Ä¢ Sonic weight (n·∫øu SONIC_MODE=weight) = +W khi c√πng chi·ªÅu (hi·ªán: mode=weight, W=1.0).\n\n"
            "<b>Moon bonus (H4):</b>\n"
            "‚Ä¢ +0..1.5 ƒëi·ªÉm t√πy preset P1‚ÄìP4 &amp; stage (pre/on/post) m·ªëc N/FQ/F/LQ ‚Äî ch·ªâ boost ƒë·ªô tin c·∫≠y, kh√¥ng t·ª± ƒë·∫£o bias.\n\n"
            "<b>Map total ‚Üí size (ƒë√≤n b·∫©y theo ƒëi·ªÉm):</b>\n"
            "‚Ä¢ Total = H4_score + M30_score + Moon_bonus.\n"
            "‚Ä¢ ‚â•8.5 ‚Üí √ó1.0; 6.5‚Äì8.5 ‚Üí √ó0.7; th·∫•p h∆°n / CT ‚Üí √ó0.4.\n\n"
            "<b>AUTO execute &amp; kh·ªëi l∆∞·ª£ng:</b>\n"
            "‚Ä¢ Trong khung th·ªßy tri·ªÅu v√† ƒë·∫°t ƒëi·ªÅu ki·ªán HTF (H4 ∆∞u ti√™n, M30 kh√¥ng ng∆∞·ª£c): ch·ªçn LONG/SHORT.\n"
            "‚Ä¢ M5 Gate ph·∫£i PASS (RELAX/STRICT t√πy ENV) m·ªõi v√†o l·ªánh.\n"
            "‚Ä¢ Kh·ªëi l∆∞·ª£ng: d√πng calc_qty(balance, risk_percent, leverage, price).\n"
            "‚Ä¢ SL/TP t·ª± ƒë·ªông theo auto_sl_by_leverage, c√≥ thu h·∫πp bi√™n t√πy preset/ENV.\n\n"
            "<b>G·ª£i √Ω debug nhanh:</b>\n"
            "‚Ä¢ /setenv_status ƒë·ªÉ xem to√†n b·ªô ENV hi·ªán t·∫°i.\n"
        )

        short_text = (
            "<b>üìò Help (r√∫t g·ªçn)</b>\n\n"
            "<b>L·ªánh ch√≠nh:</b>\n"
            "/report, /status, /order, /close, /daily, /autolog\n"
            "/preset &lt;name|auto&gt;, /tidewindow, /settings, /mode\n\n"
            "<b>/setenv (bi·∫øn m·ªõi quan tr·ªçng):</b>\n"
            f"<code>/setenv M30_FLIP_GUARD true|false</code> (hi·ªán: {v('M30_FLIP_GUARD','true')})\n"
            f"<code>/setenv M30_STABLE_MIN_SEC 1800</code> (hi·ªán: {v('M30_STABLE_MIN_SEC','1800')})\n"
            f"<code>/setenv M30_NEED_CONSEC_N 2</code> (hi·ªán: {v('M30_NEED_CONSEC_N','2')})\n"
            f"<code>/setenv M5_MIN_GAP_MIN 15</code> (hi·ªán: {v('M5_MIN_GAP_MIN','15')})\n"
            f"<code>/setenv M5_GAP_SCOPED_TO_WINDOW true|false</code> (hi·ªán: {v('M5_GAP_SCOPED_TO_WINDOW','true')})\n"
            f"<code>/setenv ALLOW_SECOND_ENTRY true|false</code> (hi·ªán: {v('ALLOW_SECOND_ENTRY','true')})\n"
            f"<code>/setenv M5_SECOND_ENTRY_MIN_RETRACE_PCT 0.3</code> (hi·ªán: {v('M5_SECOND_ENTRY_MIN_RETRACE_PCT','0.3')})\n"
            f"<code>/setenv EXTREME_BLOCK_ON true|false</code> (hi·ªán: {v('EXTREME_BLOCK_ON','true')})\n"
            f"<code>/setenv EXTREME_RSI_OB 70</code> (hi·ªán: {v('EXTREME_RSI_OB','70')})\n"
            f"<code>/setenv EXTREME_RSI_OS 30</code> (hi·ªán: {v('EXTREME_RSI_OS','30')})\n"
            f"<code>/setenv EXTREME_STOCH_OB 90</code> (hi·ªán: {v('EXTREME_STOCH_OB','90')})\n"
            f"<code>/setenv EXTREME_STOCH_OS 10</code> (hi·ªán: {v('EXTREME_STOCH_OS','10')})\n\n"
            + extra +
            "‚û°Ô∏è D√πng <code>/help</code> ƒë·ªÉ xem b·∫£n ƒë·∫ßy ƒë·ªß (ƒë√£ auto-split)."
        )
        await _send_long_html(update, context, short_text)
        return

    # B·∫¢N ƒê·∫¶Y ƒê·ª¶ ‚Äî gom nh√≥m theo format anh y√™u c·∫ßu, auto-split
    text = (
        "<b>üìò H∆∞·ªõng d·∫´n v·∫≠n h√†nh & DEBUG</b>\n\n"
        "<b>Command ch√≠nh:</b>\n"
        "/aboutme, /journal, /recovery_checklist\n"
        "/mode, /settings, /tidewindow\n"
        "/report, /status, /order, /approve, /reject, /close\n"
        "/m5report start|stop|status, /daily, /autolog, /preset name|auto\n"
        "/setenv KEY VALUE, /setenv_status\n"
        "\n"

        "<b>ENTRY timing (Tide/Late):</b>\n"
        f"<code>/setenv ENTRY_LATE_ONLY true|false</code> (hi·ªán: {v('ENTRY_LATE_ONLY','true')})\n"
        f"<code>/setenv ENTRY_LATE_FROM_HRS 0.5</code> (hi·ªán: {v('ENTRY_LATE_FROM_HRS','0.5')})\n"
        f"<code>/setenv ENTRY_LATE_TO_HRS 2.5</code> (hi·ªán: {v('ENTRY_LATE_TO_HRS','2.5')})\n"
        f"<code>/setenv TIDE_WINDOW_HOURS 2.5</code> (hi·ªán: {v('TIDE_WINDOW_HOURS','2.5')})\n"
        f"<code>/setenv TP_TIME_HOURS 5.5</code> (hi·ªán: {v('TP_TIME_HOURS','5.5')})\n\n"

        "<b>M30 Flip-guard & ·ªïn ƒë·ªãnh:</b>\n"
        f"<code>/setenv M30_FLIP_GUARD true|false</code> (hi·ªán: {v('M30_FLIP_GUARD','true')})\n"
        f"<code>/setenv M30_STABLE_MIN_SEC 1800</code> (hi·ªán: {v('M30_STABLE_MIN_SEC','1800')})\n"
        f"<code>/setenv M30_NEED_CONSEC_N 2</code> (hi·ªán: {v('M30_NEED_CONSEC_N','2')})\n\n"

        "<b>M5 spacing & second entry:</b>\n"
        f"<code>/setenv M5_MIN_GAP_MIN 15</code> (hi·ªán: {v('M5_MIN_GAP_MIN','15')})\n"
        f"<code>/setenv M5_GAP_SCOPED_TO_WINDOW true|false</code> (hi·ªán: {v('M5_GAP_SCOPED_TO_WINDOW','true')})\n"
        f"<code>/setenv ALLOW_SECOND_ENTRY true|false</code> (hi·ªán: {v('ALLOW_SECOND_ENTRY','true')})\n"
        f"<code>/setenv M5_SECOND_ENTRY_MIN_RETRACE_PCT 0.3</code> (hi·ªán: {v('M5_SECOND_ENTRY_MIN_RETRACE_PCT','0.3')})\n\n"

        "<b>Extreme-guard (RSI/Stoch):</b>\n"
        f"<code>/setenv EXTREME_BLOCK_ON true|false</code> (hi·ªán: {v('EXTREME_BLOCK_ON','true')})\n"
        f"<code>/setenv EXTREME_RSI_OB 70</code> (hi·ªán: {v('EXTREME_RSI_OB','70')})\n"
        f"<code>/setenv EXTREME_RSI_OS 30</code> (hi·ªán: {v('EXTREME_RSI_OS','30')})\n"
        f"<code>/setenv EXTREME_STOCH_OB 90</code> (hi·ªán: {v('EXTREME_STOCH_OB','90')})\n"
        f"<code>/setenv EXTREME_STOCH_OS 10</code> (hi·ªán: {v('EXTREME_STOCH_OS','10')})\n\n"

        "<b>HTF tunings & synergy:</b>\n"
        f"<code>/setenv STCH_GAP_MIN 3</code> (hi·ªán: {v('STCH_GAP_MIN','3')})\n"
        f"<code>/setenv STCH_SLOPE_MIN 2</code> (hi·ªán: {v('STCH_SLOPE_MIN','2')})\n"
        f"<code>/setenv STCH_RECENT_N 3</code> (hi·ªán: {v('STCH_RECENT_N','3')})\n"
        f"<code>/setenv HTF_NEAR_ALIGN true|false</code> (hi·ªán: {v('HTF_NEAR_ALIGN','true')})\n"
        f"<code>/setenv HTF_MIN_ALIGN_SCORE 6.5</code> (hi·ªán: {v('HTF_MIN_ALIGN_SCORE','6.5')})\n"
        f"<code>/setenv HTF_NEAR_ALIGN_GAP 2.0</code> (hi·ªán: {v('HTF_NEAR_ALIGN_GAP','2.0')})\n"
        f"<code>/setenv SYNERGY_ON true|false</code> (hi·ªán: {v('SYNERGY_ON','true')})\n"
        f"<code>/setenv M30_TAKEOVER_MIN 0</code> (hi·ªán: {v('M30_TAKEOVER_MIN','0')})\n\n"
        f"<code>/setenv CROSS_RECENT_N 2</code> (hi·ªán: {v('CROSS_RECENT_N','2')})\n"
        f"<code>/setenv RSI_GAP_MIN 2.0</code> (hi·ªán: {v('RSI_GAP_MIN','2.0')})\n\n"

        "<b>Sonic & M5 filters:</b>\n"
        f"<code>/setenv SONIC_MODE weight|off</code> (hi·ªán: {v('SONIC_MODE','weight')})\n"
        f"<code>/setenv SONIC_WEIGHT 1.0</code> (hi·ªán: {v('SONIC_WEIGHT','1.0')})\n"
        f"<code>/setenv M5_STRICT true|false</code> (hi·ªán: {v('M5_STRICT','false')})\n"
        f"<code>/setenv M5_RELAX_KIND either|rsi_only|candle_only</code> (hi·ªán: {v('M5_RELAX_KIND','either')})\n"
        f"<code>/setenv M5_LOOKBACK_RELAX 3</code> (hi·ªán: {v('M5_LOOKBACK_RELAX','3')})\n"
        f"<code>/setenv M5_RELAX_NEED_CURRENT true|false</code> (hi·ªán: {v('M5_RELAX_NEED_CURRENT','false')})\n"
        f"<code>/setenv M5_LOOKBACK_STRICT 6</code> (hi·ªán: {v('M5_LOOKBACK_STRICT','6')})\n"
        f"<code>/setenv M5_WICK_PCT 0.50</code> (hi·ªán: {v('M5_WICK_PCT','0.50')})\n"
        f"<code>/setenv M5_VOL_MULT_RELAX 1.0</code> (hi·ªán: {v('M5_VOL_MULT_RELAX','1.0')})\n"
        f"<code>/setenv M5_VOL_MULT_STRICT 1.1</code> (hi·ªán: {v('M5_VOL_MULT_STRICT','1.1')})\n"
        f"<code>/setenv M5_REQUIRE_ZONE_STRICT true|false</code> (hi·ªán: {v('M5_REQUIRE_ZONE_STRICT','true')})\n"
        f"<code>/setenv ENTRY_SEQ_WINDOW_MIN 30</code> (hi·ªán: {v('ENTRY_SEQ_WINDOW_MIN','30')})\n\n"

        "<b>Legacy/kh√°c:</b>\n"
        f"<code>/setenv RSI_OB 65</code> (hi·ªán: {v('RSI_OB','65')})\n"
        f"<code>/setenv RSI_OS 35</code> (hi·ªán: {v('RSI_OS','35')})\n"
        f"<code>/setenv DELTA_RSI30_MIN 10</code> (hi·ªán: {v('DELTA_RSI30_MIN','10')})\n"
        f"<code>/setenv SIZE_MULT_STRONG 1.0</code> (hi·ªán: {v('SIZE_MULT_STRONG','1.0')})\n"
        f"<code>/setenv SIZE_MULT_MID 0.7</code> (hi·ªán: {v('SIZE_MULT_MID','0.7')})\n"
        f"<code>/setenv SIZE_MULT_CT 0.4</code> (hi·ªán: {v('SIZE_MULT_CT','0.4')})\n"
        f"<code>/setenv MAX_TRADES_PER_WINDOW 2</code> (hi·ªán: {v('MAX_TRADES_PER_WINDOW','2')})\n"
        f"<code>/setenv MAX_TRADES_PER_DAY 8</code> (hi·ªán: {v('MAX_TRADES_PER_DAY','8')})\n"
        f"<code>/setenv M5_MAX_DELAY_SEC 60</code> (hi·ªán: {v('M5_MAX_DELAY_SEC','60')})\n"
        f"<code>/setenv SCHEDULER_TICK_SEC 2</code> (hi·ªán: {v('SCHEDULER_TICK_SEC','2')})\n"
        "\nüí° M·∫πo: d√πng <code>/help short</code> ƒë·ªÉ xem nhanh."
    )

    await _send_long_html(update, context, text)

# ========== /preset ==========
async def preset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /preset <name>|auto | /preset list
    """
    uid = _uid(update)
    if not _is_admin(uid):
        await update.message.reply_text("üö´ Ch·ªâ admin m·ªõi ƒë∆∞·ª£c ph√©p d√πng /preset.")
        return

    if not context.args or context.args[0].lower() in ("help","h"):
        await update.message.reply_text(
            "D√πng: /preset <name>|auto\n"
            "‚Ä¢ /preset list ‚Äî li·ªát k√™ preset\n"
            "‚Ä¢ V√≠ d·ª•: /preset P1 | /preset P2 | /preset P3 | /preset P4\n"
            "‚Ä¢ Auto: /preset auto  (t·ª± map theo Moon h√¥m nay ‚Äî P1..P4)",
        )
        return

    name = context.args[0].upper().strip()

    if name == "LIST":
        await update.message.reply_text(
            "Preset kh·∫£ d·ª•ng: P1, P2, P3, P4 (ho·∫∑c d√πng: auto)\n"
            "P1: 0‚Äì25% | P2: 25‚Äì75% (waxing) | P3: 75‚Äì100% | P4: 25‚Äì75% (waning)"
        )
        return

    if name == "AUTO":
        os.environ["PRESET_MODE"] = "AUTO"
        pcode, meta = resolve_preset_code(None)
        chosen = pcode  # P1..P4
        if chosen not in PRESETS:
            await update.message.reply_text(f"Kh√¥ng map ƒë∆∞·ª£c preset cho {pcode}.")
            return
        hdr = (
            "üåï Moon h√¥m nay: "
            f"<b>{_esc(meta.get('phase') or '')}</b> | "
            f"illum={meta.get('illum')}% | dir={meta.get('direction')}\n"
            f"‚Üí ch·ªçn preset: <b>{_esc(pcode)}</b> ‚Äî {_esc(meta.get('label') or '')}"
        )
        await _apply_preset_and_reply(update, chosen, hdr)
        return

    # manual P-code
    if name not in PRESETS:
        await update.message.reply_text("‚ùì Kh√¥ng c√≥ preset. D√πng /preset list (P1..P4) ho·∫∑c 'auto'.")
        return
    os.environ["PRESET_MODE"] = name
    await _apply_preset_and_reply(update, name)

# === /setenv: c·∫≠p nh·∫≠t ENV + ƒë·∫©y v√†o core.auto_trade_engine ===
async def setenv_cmd(update, context):
    """
    /setenv KEY VALUE
    /setenv_status
    """
    from core import auto_trade_engine as ae

    msg = update.effective_message
    if not context.args or len(context.args) < 2:
        await msg.reply_html(
            "D√πng: <code>/setenv KEY VALUE</code>\n"
            "VD: <code>/setenv ENTRY_LATE_ONLY true</code>\n"
            "Xem tr·∫°ng th√°i: <code>/setenv_status</code>"
        )
        return

    key = (context.args[0] or "").strip()
    val_raw = " ".join(context.args[1:]).strip()

    # √©p ki·ªÉu helper
    def _as_bool(s: str) -> bool:
        return str(s or "").strip().lower() in ("1","true","on","yes","y")

    def _is_floatlike(s: str) -> bool:
        try: float(s); return True
        except: return False

    def _is_intlike(s: str) -> bool:
        try: int(float(s)); return True
        except: return False

    # alias t∆∞∆°ng th√≠ch c≈©:
    aliases = {
        "MAX_ORDERS_PER_TIDE_WINDOW": "MAX_TRADES_PER_WINDOW",
        "EXTREME_GUARD": "EXTREME_BLOCK_ON",
        "EXTREME_GUARD_KIND": "EXTREME_KIND",  # t·∫°m passthrough string
    }
    key_norm = aliases.get(key, key)

    bool_keys = {
        "ENTRY_LATE_ONLY","ENTRY_LATE_PREF",
        "AUTO_DEBUG","AUTO_DEBUG_VERBOSE","AUTO_DEBUG_ONLY_WHEN_SKIP",
        "ENFORCE_M5_MATCH_M30",
        "M30_FLIP_GUARD",
        "M5_GAP_SCOPED_TO_WINDOW","ALLOW_SECOND_ENTRY",
        "M5_RELAX_NEED_CURRENT","M5_REQUIRE_ZONE_STRICT",
        "HTF_NEAR_ALIGN","SYNERGY_ON",
        "EXTREME_BLOCK_ON",
    }
    int_keys = {
        "M5_MAX_DELAY_SEC","SCHEDULER_TICK_SEC",
        "MAX_TRADES_PER_WINDOW","MAX_TRADES_PER_DAY","MAX_TRADES_PER_TIDE_WINDOW",
        "M30_STABLE_MIN_SEC","M30_NEED_CONSEC_N",
        "M5_MIN_GAP_MIN","M5_LOOKBACK_RELAX","M5_LOOKBACK_STRICT",
        "ENTRY_SEQ_WINDOW_MIN","M30_TAKEOVER_MIN","CROSS_RECENT_N",
        "RSI_OB","RSI_OS",
        "STCH_RECENT_N",
    }
    float_keys = {
        "ENTRY_LATE_FROM_HRS","ENTRY_LATE_TO_HRS","TP_TIME_HOURS",
        "M5_WICK_PCT","M5_VOL_MULT_RELAX","M5_VOL_MULT_STRICT",
        "M5_SECOND_ENTRY_MIN_RETRACE_PCT",
        "EXTREME_RSI_OB","EXTREME_RSI_OS","EXTREME_STOCH_OB","EXTREME_STOCH_OS",
        "SIZE_MULT_STRONG","SIZE_MULT_MID","SIZE_MULT_CT",
        "SONIC_WEIGHT","HTF_MIN_ALIGN_SCORE","HTF_NEAR_ALIGN_GAP",
        "STCH_GAP_MIN","STCH_SLOPE_MIN", "RSI_GAP_MIN",
    }
    passthrough_str = {"SONIC_MODE","M5_RELAX_KIND","AUTO_DEBUG_CHAT_ID","EXTREME_KIND"}

    kv_to_apply = {}
    try:
        if key_norm in bool_keys:
            kv_to_apply[key_norm] = "true" if _as_bool(val_raw) else "false"
        elif key_norm in int_keys:
            if not _is_intlike(val_raw):
                await msg.reply_text(f"Gi√° tr·ªã cho {key_norm} ph·∫£i l√† s·ªë nguy√™n."); return
            kv_to_apply[key_norm] = str(int(float(val_raw)))
        elif key_norm in float_keys:
            if not _is_floatlike(val_raw):
                await msg.reply_text(f"Gi√° tr·ªã cho {key_norm} ph·∫£i l√† s·ªë (float)."); return
            kv_to_apply[key_norm] = str(float(val_raw))
        elif key_norm in passthrough_str:
            kv_to_apply[key_norm] = val_raw
        else:
            await msg.reply_text(f"KEY kh√¥ng ƒë∆∞·ª£c ph√©p: {key}\nG√µ /help ƒë·ªÉ xem KEY h·ªó tr·ª£."); return
    except Exception as e:
        await msg.reply_text(f"L·ªói √©p ki·ªÉu: {e}"); return

    # ghi ENV
    for k, v in kv_to_apply.items():
        os.environ[k] = v

    # ƒë·∫©y v√†o core
    try:
        ae._apply_runtime_env(kv_to_apply)
    except Exception as e:
        print(f"[WARN] _apply_runtime_env failed: {e}")

    pretty = "\n".join([f"‚Ä¢ {k} = {v}" for k, v in kv_to_apply.items()])
    await msg.reply_html(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t ENV (runtime):\n{pretty}")

# ========== /setenv_status ==========
async def setenv_status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /setenv_status ‚Üí In ra c·∫•u h√¨nh ENV/runtime hi·ªán t·∫°i + t√≥m t·∫Øt user settings.
    """
    uid = _uid(update)
    if not _is_admin(uid):
        await update.message.reply_text("üö´ Ch·ªâ admin m·ªõi ƒë∆∞·ª£c ph√©p d√πng /setenv_status.")
        return

    keys = [
        "PRESET_MODE",
        # Debug
        "AUTO_DEBUG", "AUTO_DEBUG_VERBOSE", "AUTO_DEBUG_ONLY_WHEN_SKIP", "AUTO_DEBUG_CHAT_ID",

        # Timing
        "ENTRY_LATE_PREF", "ENTRY_LATE_ONLY", "ENTRY_LATE_FROM_HRS", "ENTRY_LATE_TO_HRS",
        "TIDE_WINDOW_HOURS", "TP_TIME_HOURS",

        "M30_FLIP_GUARD", "M30_STABLE_MIN_SEC", # m30 check chuy·ªÉn xu h∆∞·ªõng M30, sau bao l√¢u m·ªõi cho m5 v√†o

        # M5 (m·ªõi)
        "M5_STRICT", "M5_RELAX_KIND",
        "M5_LOOKBACK",                 # legacy
        "M5_LOOKBACK_RELAX",           # NEW
        "M5_RELAX_NEED_CURRENT",       # NEW
        "M5_LOOKBACK_STRICT",          # NEW
        "M5_WICK_PCT",
        "M5_VOL_MULT",                 # legacy
        "M5_VOL_MULT_RELAX",           # NEW
        "M5_VOL_MULT_STRICT",          # NEW
        "M5_REQUIRE_ZONE_STRICT",
        "ENTRY_SEQ_WINDOW_MIN",
        # M5 entry spacing / second entry
        "M5_MIN_GAP_MIN",
        "M5_GAP_SCOPED_TO_WINDOW",
        "ALLOW_SECOND_ENTRY",
        "M5_SECOND_ENTRY_MIN_RETRACE_PCT",        
        

        # Legacy / scoring
        "M5_WICK_MIN", "M5_WICK_MIN_CT", "VOL_MA20_MULT", "RSI_OB", "RSI_OS", "DELTA_RSI30_MIN",
        "SIZE_MULT_STRONG", "SIZE_MULT_MID", "SIZE_MULT_CT",

        # Sonic
        "SONIC_MODE", "SONIC_WEIGHT",

        # ===== NEW knobs cho H4/M30 n·ªõi l·ªèng & ƒë·ªìng b·ªô =====
        "STCH_GAP_MIN", "STCH_SLOPE_MIN", "STCH_RECENT_N",
        "HTF_NEAR_ALIGN", "HTF_MIN_ALIGN_SCORE", "HTF_NEAR_ALIGN_GAP",
        "SYNERGY_ON", "M30_TAKEOVER_MIN",
		
		# ===== Extreme guard (block LONG/SHORT ·ªü v√πng qu√° mua/b√°n H4/M30) =====
		"EXTREME_BLOCK_ON", "EXTREME_RSI_OB", "EXTREME_RSI_OS", "EXTREME_STOCH_OB", "EXTREME_STOCH_OS",


        # Limits
        "MAX_TRADES_PER_WINDOW", "MAX_CONCURRENT_POS", "M5_MAX_DELAY_SEC", "SCHEDULER_TICK_SEC",

        # Admin
        "ADMIN_USER_ID",
    ]

    from core import auto_trade_engine as ae
    def _get_val(k: str):
        v = os.getenv(k)
        if v is None and hasattr(ae, k):
            try:
                vv = getattr(ae, k)
                if isinstance(vv, bool):
                    return "true" if vv else "false"
                return str(vv)
            except Exception:
                return "‚Äî"
        return v if v is not None else "‚Äî"

    lines = [f"{k} = {_get_val(k)}" for k in keys]

    st = storage.get_user(uid)
    user_lines = [
        "",
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî",
        "User Settings:",
        f"PAIR = {st.settings.pair}",
        f"MODE = {st.settings.mode}",
        f"RISK_PERCENT = {st.settings.risk_percent}",
        f"LEVERAGE = x{st.settings.leverage}",
        f"TIDE_WINDOW_HOURS = {st.settings.tide_window_hours}",
        f"MAX_TRADES_PER_DAY = {st.settings.max_orders_per_day}",
        f"MAX_TRADES_PER_TIDE_WINDOW = {st.settings.max_orders_per_tide_window}",
        f"M5_REPORT_ENABLED = {st.settings.m5_report_enabled}",
    ]

    text = "<b>üìä ENV Status hi·ªán t·∫°i:</b>\n" + "\n".join(lines + user_lines)
    if len(text) > 3900:
        text = text[:3900] + "\n‚Ä¶(r√∫t g·ªçn)‚Ä¶"
    await update.message.reply_text(text, parse_mode="HTML")


async def mode_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _uid(update)
    st = storage.get_user(uid)
    if context.args and context.args[0].lower() in ("manual","auto"):
        st.settings.mode = context.args[0].lower()
        storage.put_user(uid, st)
        await update.message.reply_text(f"ƒê√£ chuy·ªÉn ch·∫ø ƒë·ªô: {st.settings.mode}")
    else:
        await update.message.reply_text(f"Ch·∫ø ƒë·ªô hi·ªán t·∫°i: {st.settings.mode}. D√πng: /mode manual|auto")

async def settings_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _uid(update)
    st = storage.get_user(uid)
    if context.args and len(context.args) >= 3:
        st.settings.pair = context.args[0].upper()
        try:
            st.settings.risk_percent = float(context.args[1])
            st.settings.leverage = int(float(context.args[2]))
        except Exception:
            await update.message.reply_text("Sai c√∫ ph√°p. D√πng: /settings BTC/USDT 10 17"); return
        storage.put_user(uid, st)
        await update.message.reply_text(f"OK. Pair={st.settings.pair}, Risk={st.settings.risk_percent}%, Lev=x{st.settings.leverage}")
    else:
        await update.message.reply_text(
            f"Hi·ªán t·∫°i: Pair={st.settings.pair}, Risk={st.settings.risk_percent}%, Lev=x{st.settings.leverage}.\n"
            f"D√πng: /settings BTC/USDT 10 17"
        )

async def tidewindow_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _uid(update)
    st = storage.get_user(uid)
    if context.args:
        st.settings.tide_window_hours = float(context.args[0])
        storage.put_user(uid, st)
        await update.message.reply_text(f"ƒê√£ ƒë·∫∑t ¬±{st.settings.tide_window_hours}h quanh m·ªëc th·ªßy tri·ªÅu.")
    else:
        await update.message.reply_text(f"ƒêang d√πng ¬±{st.settings.tide_window_hours}h. D√πng: /tidewindow 2")

# ======== TP-by-time (live) helper ========
def _tp_eta_text(uid: int) -> Optional[str]:
    try:
        from core import auto_trade_engine as ae
    except Exception:
        return None

    pos = ae._open_pos.get(uid)
    if not isinstance(pos, dict):
        return None

    try:
        tp_hours = float(os.getenv("TP_TIME_HOURS", os.getenv("TIDE_EXIT_HOURS", "4.5")))
    except Exception:
        tp_hours = 4.5

    now = now_vn()
    base = pos.get("tide_center") or pos.get("entry_time") or now
    try:
        if base.tzinfo is None:
            base = base.replace(tzinfo=now.tzinfo)
    except Exception:
        pass

    deadline = base + timedelta(hours=tp_hours)
    remain = deadline - now
    rem_sec = int(remain.total_seconds())

    base_tag = "tide_center" if pos.get("tide_center") else "entry_time"
    if rem_sec <= 0:
        return f"TP-by-time (live): {deadline.strftime('%Y-%m-%d %H:%M:%S')} ‚Äî ‚è∞ ƒë√£ qu√° h·∫°n (base={base_tag}, H={tp_hours:g})"

    hrs = rem_sec // 3600
    mins = (rem_sec % 3600) // 60
    return (
        f"TP-by-time (live): {deadline.strftime('%Y-%m-%d %H:%M:%S')} "
        f"| c√≤n ~ {hrs}h{mins:02d} (base={base_tag}, H={tp_hours:g})"
    )

# ================== Position formatter ==================
async def _format_position_status(symbol: str, fallback_lev: Optional[int] = None) -> str:
    try:
        positions = None
        try:
            positions = await ex._io(ex.client.fetch_positions, [symbol])
        except Exception:
            try:
                one = await ex._io(ex.client.fetch_position, symbol)
                positions = [one] if one else []
            except Exception:
                positions = []

        if not positions:
            return "Position: (Kh√¥ng c√≥ v·ªã th·∫ø m·ªü)"

        p_use = None
        amt_signed = 0.0
        for p in positions or []:
            amt = 0.0
            if isinstance(p, dict):
                info = p.get("info", {}) or {}
                if "positionAmt" in info:
                    try: amt = float(info.get("positionAmt") or 0)
                    except: amt = 0.0
                elif "contracts" in p:
                    try: amt = float(p.get("contracts") or 0)
                    except: amt = 0.0
                elif "amount" in p:
                    try: amt = float(p.get("amount") or 0)
                    except: amt = 0.0
            if abs(amt) != 0:
                p_use = p; amt_signed = amt; break

        if p_use is None:
            return "Position: (Kh√¥ng c√≥ v·ªã th·∫ø m·ªü)"

        def _flt(x):
            try: return float(x)
            except: return None

        info = {}
        if isinstance(p_use, dict):
            info = p_use.get("info", {}) or {}

        side = "LONG" if amt_signed > 0 else ("SHORT" if amt_signed < 0 else "FLAT")
        entry = _flt(info.get("entryPrice") or info.get("avgEntryPrice") or p_use.get("entryPrice") or p_use.get("avgPrice"))
        contracts = _flt(info.get("positionAmt") or p_use.get("contracts") or p_use.get("amount")) or 0.0
        u_pnl = _flt(info.get("unrealizedProfit") or p_use.get("unrealizedPnl"))
        lev_val = _flt(info.get("leverage") or p_use.get("leverage"))

        if (not lev_val) or lev_val <= 0:
            try:
                init_margin = _flt(info.get("positionInitialMargin") or p_use.get("initialMargin"))
                notional = (entry or 0) * abs(contracts or 0)
                if init_margin and init_margin > 0 and notional > 0:
                    try: lev_val = max(1, int(round(notional / init_margin)))
                    except Exception: lev_val = None
            except Exception:
                lev_val = None

        lev_str = f"x{int(lev_val)}" if isinstance(lev_val, (int,float)) and lev_val>0 else (f"~x{int(fallback_lev)}" if fallback_lev else "‚Äî")

        roe = None
        init_margin = _flt(info.get("positionInitialMargin") or p_use.get("initialMargin"))
        if init_margin and init_margin != 0:
            roe = (u_pnl or 0.0) / init_margin * 100.0
        else:
            if entry and contracts and isinstance(lev_val, (int,float)) and lev_val>0:
                denom = (entry * contracts / lev_val)
                if denom:
                    roe = (u_pnl or 0.0) / denom * 100.0

        roe_str = "‚Äî"
        if roe is not None:
            arrow = "üü¢" if roe >= 0 else "üî¥"
            roe_str = f"{roe:.2f}% {arrow}"
        entry_str = f"{entry:.6f}" if entry is not None else "‚Äî"

        return (
            f"Position: {side} {symbol}\n"
            f"Entry: {entry_str}\n"
            f"Contracts: {contracts:.6f}\n"
            f"Unrealized PnL: {0.0 if u_pnl is None else u_pnl:.8f}\n"
            f"PnL% (ROE): {roe_str}\n"
            f"Leverage: {lev_str}"
        )
    except Exception as e:
        return f"Position: (L·ªói l·∫•y v·ªã th·∫ø) ‚Äî {e}"

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _uid(update)
    st = storage.get_user(uid)
    head = (
        f"Pair: {st.settings.pair}\n"
        f"Mode: {st.settings.mode}\n"
        f"Risk: {st.settings.risk_percent}%\n"
        f"Lev: x{st.settings.leverage}\n"
        f"ƒê√£ d√πng {st.today.count}/{st.settings.max_orders_per_day} l·ªánh h√¥m nay.\n"
        f"Gi·ªõi h·∫°n m·ªói c·ª≠a s·ªï th·ªßy tri·ªÅu: {st.settings.max_orders_per_tide_window}\n"
        f"M5 report: {'ON' if st.settings.m5_report_enabled else 'OFF'}\n"
    )
    tp_line = _tp_eta_text(uid)
    if tp_line:
        head += tp_line + "\n"
    pos = await _format_position_status(st.settings.pair, fallback_lev=st.settings.leverage)
    await update.message.reply_text(head + "\n" + pos)

async def order_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /order <long|short> [qty|auto] [sl] [tp]
    - ƒê·∫∑t l·ªánh ƒë·ªìng th·ªùi: account m·∫∑c ƒë·ªãnh (Binance/SINGLE_ACCOUNT) + t·∫•t c·∫£ account trong ACCOUNTS_JSON.
    - Kh·ªõp l·ªánh theo futures c·ªßa t·ª´ng s√†n; broadcast hi·ªÉn th·ªã Entry theo BINANCE SPOT.
    - Mode label: "Th·ªß c√¥ng ORDER".
    """
    import os, json
    from config import settings as _S
    from core.trade_executor import ExchangeClient, calc_qty, auto_sl_by_leverage

    msg = update.effective_message
    uid = update.effective_user.id if update.effective_user else 0

    if not context.args:
        await msg.reply_text("D√πng: /order <long|short> [qty|auto] [sl] [tp]\nVD: /order long auto")
        return

    side_raw = (context.args[0] or "").strip().lower()
    if side_raw not in ("long","short"):
        await msg.reply_text("Side ph·∫£i l√† long|short. VD: /order short auto"); return
    side_long = (side_raw == "long")

    qty_arg = None; sl_arg = None; tp_arg = None
    if len(context.args) >= 2 and context.args[1].strip().lower() != "auto":
        try: qty_arg = float(context.args[1])
        except: qty_arg = None
    if len(context.args) >= 3:
        try: sl_arg = float(context.args[2])
        except: sl_arg = None
    if len(context.args) >= 4:
        try: tp_arg = float(context.args[3])
        except: tp_arg = None

    # user settings
    DEFAULT_PAIR = getattr(_S, "PAIR", "BTC/USDT")
    try:
        st = storage.get_user(uid)
        risk_percent = float(st.settings.risk_percent)
        leverage     = int(st.settings.leverage)
        logic_pair   = st.settings.pair or DEFAULT_PAIR
    except Exception:
        risk_percent = float(getattr(_S, "RISK_PERCENT_DEFAULT", 20))
        leverage     = int(getattr(_S, "LEVERAGE_DEFAULT", 44))
        logic_pair   = DEFAULT_PAIR

    # QUOTA precheck (tide + daily)
    ok_quota, why, tide_label, tkey, used = _quota_precheck_and_label(st)
    if not ok_quota:
        await msg.reply_text(why); return

    # t·∫≠p account
    try:
        ACCOUNTS = getattr(_S, "ACCOUNTS", [])
        if not isinstance(ACCOUNTS, list): ACCOUNTS = []
    except Exception:
        try:
            ACCOUNTS = json.loads(os.getenv("ACCOUNTS_JSON","[]"))
            if not isinstance(ACCOUNTS, list): ACCOUNTS = []
        except Exception:
            ACCOUNTS = []
    SINGLE_ACCOUNT = getattr(_S, "SINGLE_ACCOUNT", None)
    base = ([SINGLE_ACCOUNT] if SINGLE_ACCOUNT else []) + ACCOUNTS

    # l·ªçc tr√πng
    uniq, seen = [], set()
    for acc in base:
        try:
            exid = str(acc.get("exchange","")).lower()
            key  = (exid, acc.get("api_key",""))
            if key in seen: continue
            seen.add(key)
            if not acc.get("pair"):
                acc = {**acc, "pair": logic_pair}
            uniq.append(acc)
        except Exception:
            continue

    if not uniq:
        await msg.reply_text("Kh√¥ng c√≥ account n√†o ƒë·ªÉ ƒë·∫∑t l·ªánh. Ki·ªÉm tra API_KEY/API_SECRET ho·∫∑c ACCOUNTS_JSON."); return

    # Entry hi·ªÉn th·ªã t·ª´ BINANCE SPOT
    entry_spot = _binance_spot_entry(logic_pair)

    # ch·∫°y t·ª´ng s√†n
    results = []
    for acc in uniq:
        try:
            exid   = str(acc.get("exchange") or "").lower()
            name   = acc.get("name","default")
            api    = acc.get("api_key") or ""
            secret = acc.get("api_secret") or ""
            testnet= bool(acc.get("testnet", False))
            pair   = acc.get("pair") or logic_pair

            cli = ExchangeClient(exid, api, secret, testnet)
            px  = await cli.ticker_price(pair)
            if not px or px <= 0:
                results.append(f"‚Ä¢ {name} | {exid} | {pair} ‚Üí ERR: Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° futures."); 
                continue

            bal = await cli.balance_usdt()
            if qty_arg and qty_arg > 0:
                qty = float(qty_arg)
            else:
                qty = calc_qty(bal, risk_percent, leverage, px, float(os.getenv("LOT_STEP_FALLBACK","0.001")))

            # SL/TP
            if sl_arg is None or tp_arg is None:
                sl_auto, tp_auto = auto_sl_by_leverage(px, "LONG" if side_long else "SHORT", leverage)
                sl_use = sl_arg if sl_arg is not None else sl_auto
                tp_use = tp_arg if tp_arg is not None else tp_auto
            else:
                sl_use, tp_use = sl_arg, tp_arg

            try: await cli.set_leverage(pair, leverage)
            except Exception: pass

            r = await cli.market_with_sl_tp(pair, side_long, qty, sl_use, tp_use)
            results.append(f"‚Ä¢ {name} | {exid} | {pair} ‚Üí {r.message}")

            # broadcast khi OK
            if getattr(r, "ok", False):
                side_label = "LONG" if side_long else "SHORT"
                btxt = _fmt_exec_broadcast(
                    pair=pair.replace(":USDT",""),
                    side=side_label,
                    acc_name=name, ex_id=exid,
                    lev=leverage, risk=risk_percent, qty=qty,
                    entry_spot=(entry_spot or px),
                    sl=sl_use, tp=tp_use,
                    tide_label=tide_label, mode_label="Th·ªß c√¥ng ORDER",
                )
                await _broadcast_html(btxt)

        except Exception as e:
            results.append(f"‚Ä¢ {acc.get('name','?')} | ERR: {e}")

    # QUOTA commit (1 l·∫ßn)
    _quota_commit(st, tkey, used, uid)

    await msg.reply_text(
        f"‚úÖ /order {side_raw.upper()} | risk={risk_percent:.1f}%, lev=x{leverage}\n"
        f"‚è± Tide window: {tide_label}\n" + "\n".join(results)
    )

async def report_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /report
    - In b√°o c√°o H4‚ÜíM30 (v√† daily Moon/Tide).
    - N·∫øu MODE=manual: t·∫°o pending (duy·ªát /approve).
    - N·∫øu MODE=auto v√† c√≥ t√≠n hi·ªáu h·ª£p l·ªá:
        + KI·ªÇM TRA QUOTA tr∆∞·ªõc khi v√†o l·ªánh (2 l·ªánh/tide, 8 l·ªánh/ng√†y): _quota_precheck_and_label(st)
        + V√†o l·ªánh (single-account hi·ªán t·∫°i). Sau khi TH·ª¨ v√†o l·ªánh xong ‚Üí _quota_commit(st, tkey, used, uid) 1 l·∫ßn.
        + Broadcast ‚ÄúMode: AUTO‚Äù (entry hi·ªÉn th·ªã d√πng Binance SPOT).
    """
    uid = _uid(update)
    st = storage.get_user(uid)

    # ----------- 1) B√°o c√°o k·ªπ thu·∫≠t + daily ----------
    d = now_vn().date().isoformat()
    daily = format_daily_moon_tide_report(d, float(st.settings.tide_window_hours))

    sym = st.settings.pair.replace("/", "")
    loop = asyncio.get_event_loop()
    try:
        try:
            res = await loop.run_in_executor(
                None, lambda: evaluate_signal(sym, tide_window_hours=float(st.settings.tide_window_hours))
            )
        except TypeError:
            # fallback version h√†m c≈©
            res = await loop.run_in_executor(None, lambda: evaluate_signal(sym))
    except Exception as e:
        await update.message.reply_text(_esc(daily) + f"\n\n‚ö†Ô∏è L·ªói /report: {_esc(str(e))}")
        return

    if not isinstance(res, dict) or not res.get("ok", False):
        reason = (isinstance(res, dict) and (res.get("text") or res.get("reason"))) or "Kh√¥ng t·∫°o ƒë∆∞·ª£c snapshot k·ªπ thu·∫≠t."
        await update.message.reply_text(_esc(daily) + f"\n\n‚ö†Ô∏è {_esc(reason)}")
        return

    ta_text = res.get("text") or format_signal_report(res)
    ta_text = _beautify_report(ta_text)
    safe_daily = _esc(daily)
    safe_ta    = _esc(ta_text)

    # In b√°o c√°o tr∆∞·ªõc
    try:
        await update.message.reply_text(safe_daily + "\n\n" + safe_ta, parse_mode="HTML")
    except Exception:
        await update.message.reply_text(safe_daily + "\n\n" + (res.get("text") or "‚Äî"))

    # Kh√¥ng trade n·∫øu b·ªã skip
    if res.get("skip", True):
        return

    side = (res.get("signal") or "NONE").upper()
    if side not in ("LONG", "SHORT"):
        return

    # ----------- 2) Nh√°nh MANUAL: t·∫°o pending ----------
    if (st.settings.mode or "manual").lower() == "manual":
        score = int(res.get("confidence", 0))
        ps = create_pending(storage, uid, st.settings.pair, side, score, entry_hint=None, sl=None, tp=None)
        block = (
            safe_ta
            + f"\nID: <code>{ps.id}</code>\nD√πng /approve {ps.id} ho·∫∑c /reject {ps.id}"
        )
        await update.message.reply_text(safe_daily + "\n\n" + block, parse_mode="HTML")
        return

    # ----------- 3) Nh√°nh AUTO: quota + timing + v√†o l·ªánh ----------
    # 3.1 QUOTA PRECHECK (m·ª•c 2.7)
    ok_quota, why, tide_label, tkey, used = _quota_precheck_and_label(st)
    if not ok_quota:
        try:
            await update.message.reply_text("(AUTO) " + why)
        except Exception:
            pass
        return

    # 3.2 R√†ng bu·ªôc "late window" (n·∫øu b·∫≠t)
    try:
        late_only = (os.getenv("ENTRY_LATE_ONLY", "false").lower() in ("1","true","yes","on","y"))
        late_pref = (os.getenv("ENTRY_LATE_PREF", "false").lower() in ("1","true","yes","on","y"))
        late_from = float(os.getenv("ENTRY_LATE_FROM_HRS", "1.5"))
        late_to   = float(os.getenv("ENTRY_LATE_TO_HRS", "2.0"))

        now = now_vn()
        twin = tide_window_now(now, hours=float(st.settings.tide_window_hours))
        if twin:
            start, end = twin
            center = start + (end - start) / 2
            delta_hr = (now - center).total_seconds() / 3600.0
            in_late = (delta_hr >= late_from and delta_hr <= late_to)

            if late_only and not in_late:
                await update.message.reply_text(
                    "(AUTO) "
                    + _esc(
                        f"ENTRY_LATE_ONLY=true ‚Üí ch·ªâ cho ph√©p v√†o trong late window "
                        f"[{(center + timedelta(hours=late_from)).strftime('%H:%M')}‚Äì{(center + timedelta(hours=late_to)).strftime('%H:%M')}] "
                        f"(center={center.strftime('%H:%M')}, now={now.strftime('%H:%M')}).\n"
                        "‚è∏ B·ªè qua v√†o l·ªánh l·∫ßn n√†y."
                    )
                )
                return

            if (not late_only) and late_pref and (not in_late):
                conf = int(res.get("confidence", 0))
                if conf < 6:
                    await update.message.reply_text(
                        "(AUTO) " + _esc("ENTRY_LATE_PREF=true v√† ngo√†i late window ‚Üí b·ªè qua v√¨ ƒëi·ªÉm ch∆∞a ƒë·ªß m·∫°nh.")
                    )
                    return
    except Exception as _e_enforce:
        print(f"[AUTO][WARN] Late-window check error: {_e_enforce}")

    # 3.3 L·∫•y gi√° SPOT (ƒë·ªÉ hi·ªÉn th·ªã broadcast) + gi√° futures (ƒë·ªÉ kh·ªõp l·ªánh)
    try:
        from data.market_data import get_klines
        dfp = get_klines(symbol=st.settings.pair.replace("/", ""), interval="5m", limit=2)
        if dfp is None or len(dfp) == 0:
            await update.message.reply_text("(AUTO) Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° hi·ªán t·∫°i.")
            return
        close = float(dfp.iloc[-1]["close"])
    except Exception as e:
        await update.message.reply_text(f"(AUTO) L·ªói l·∫•y gi√°: {_esc(str(e))}")
        return

    # 3.4 T√≠nh size + leverage
    try:
        bal = await ex.balance_usdt()
        qty = calc_qty(bal, st.settings.risk_percent, st.settings.leverage, close)
        await ex.set_leverage(st.settings.pair, st.settings.leverage)
    except Exception as e:
        await update.message.reply_text(f"(AUTO) L·ªói kh·ªëi l∆∞·ª£ng/leverage: {_esc(str(e))}")
        return

    side_long = (side == "LONG")
    try:
        sl_price, tp_price = auto_sl_by_leverage(close, "LONG" if side_long else "SHORT", st.settings.leverage)
    except Exception:
        if side_long:
            sl_price, tp_price = close * 0.99, close * 1.02
        else:
            sl_price, tp_price = close * 1.01, close * 0.98

    # 3.5 Th·ª≠ kh·ªõp l·ªánh (single-account hi·ªán t·∫°i)
    try:
        res_exe = await ex.market_with_sl_tp(st.settings.pair, side_long, qty, sl_price, tp_price)
    except Exception as e:
        res_exe = OrderResult(False, f"Order failed: {e}")  # fallback ƒë·ªÉ v·∫´n commit quota

    # 3.6 L∆∞u l·ªãch s·ª≠ (kh√¥ng c·ªông quota ·ªü ƒë√¢y)
    st.history.append({
        "id": f"AUTO-{datetime.now().strftime('%H%M%S')}",
        "side": side, "qty": qty, "entry": close,
        "sl": sl_price, "tp": tp_price,
        "ok": getattr(res_exe, "ok", True), "msg": getattr(res_exe, "message", "")
    })
    storage.put_user(uid, st)

    # 3.7 Broadcast ‚ÄúMode: AUTO‚Äù (hi·ªÉn th·ªã entry t·ª´ Binance SPOT), n·∫øu l·ªánh OK
    try:
        if getattr(res_exe, "ok", False):
            entry_spot = _binance_spot_entry(st.settings.pair)
            btxt = _fmt_exec_broadcast(
                pair=st.settings.pair.replace(":USDT",""),
                side=("LONG" if side_long else "SHORT"),
                acc_name="default",
                ex_id=getattr(ex, "exchange_id", "binanceusdm"),
                lev=st.settings.leverage,
                risk=st.settings.risk_percent,
                qty=qty,
                entry_spot=(entry_spot or close),
                sl=sl_price, tp=tp_price,
                tide_label=tide_label,  # l·∫•y t·ª´ quota-precheck
                mode_label="AUTO",
            )
            await _broadcast_html(btxt)
    except Exception:
        pass

    # 3.8 QUOTA COMMIT (m·ª•c 2.7) ‚Äî ch·ªâ +1 l·∫ßn cho c·∫£ phi√™n AUTO n√†y
    _quota_commit(st, tkey, used, uid)

    # 3.9 Ph·∫£n h·ªìi k·∫øt qu·∫£
    enter_line = (
        f"üîß Executed: {st.settings.pair} {'LONG' if side_long else 'SHORT'} "
        f"qty={qty:.6f} @~{close:.2f} | SL={sl_price:.2f} | TP={tp_price:.2f}\n"
        f"‚Ü≥ {getattr(res_exe, 'message', '')}"
    )
    await update.message.reply_text("(AUTO)\n" + enter_line)

# ================== /m5report ==================
async def m5report_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _uid(update)
    st = storage.get_user(uid)

    arg = (context.args[0].lower() if context.args else "status")
    if arg not in ("start", "stop", "status"):
        await update.message.reply_text("D√πng: /m5report start | stop | status")
        return

    if arg == "status":
        await update.message.reply_text(f"M5 report hi·ªán: {'ON' if st.settings.m5_report_enabled else 'OFF'}")
        return

    if arg == "start":
        st.settings.m5_report_enabled = True
        storage.put_user(uid, st)
        await update.message.reply_text("‚úÖ ƒê√É B·∫¨T M5 report (s·∫Ω t·ª± ƒë·ªông g·ª≠i snapshot m·ªói 5 ph√∫t).")
        try:
            # 1) Snapshot M5 nh∆∞ c≈©
            sym = st.settings.pair.replace("/", "")
            snap = m5_snapshot(sym)

            # 2) N·∫øu ƒëang ·ªü MANUAL v√† c√≥ pending -> gh√©p th√™m block g·ª£i √Ω duy·ªát tay
            try:
                mode_now = (st.settings.mode or "").lower()
            except Exception:
                mode_now = "manual"

            # st.pending do engine set khi ph√°t hi·ªán ƒë·ªß ƒëi·ªÅu ki·ªán nh∆∞ng ·ªü manual
            pend = getattr(st, "pending", None)

            if mode_now == "manual" and pend:
                # an to√†n ho√° d·ªØ li·ªáu hi·ªÉn th·ªã
                pid  = getattr(pend, "id", None)
                side = str(getattr(pend, "side", "") or "").upper()
                sl   = getattr(pend, "sl", None)
                tp   = getattr(pend, "tp", None)

                # T√™n c·∫∑p ƒë·ªãnh d·∫°ng cho futures multi-exchange (v√≠ d·ª• "BTC/USDT:USDT")
                pair_u = st.settings.pair

                hint_lines = [
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
                    "üü® <b>Pending c·∫ßn duy·ªát (MANUAL)</b>",
                    f"‚Ä¢ ID: <code>{pid}</code>",
                    f"‚Ä¢ Pair: <code>{pair_u}</code> | Side: <b>{side or '‚Äî'}</b>",
                    f"‚Ä¢ SL: <code>{'‚Äî' if sl is None else f'{float(sl):.2f}'}</code> | "
                    f"TP: <code>{'‚Äî' if tp is None else f'{float(tp):.2f}'}</code>",
                    "",
                    f"üëâ Duy·ªát: <code>/approve {pid}</code>",
                    f"‚ùå Hu·ª∑:  <code>/reject {pid}</code>",
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
                ]
                snap = snap + "\n" + "\n".join(hint_lines)

            # G·ª≠i ra 1 l·∫ßn ngay khi start
            await update.message.reply_text(snap, parse_mode=constants.ParseMode.HTML)

        except Exception as e:
            # Gi·ªØ nguy√™n th√¥ng b√°o l·ªói c≈©
            await update.message.reply_text(f"‚ö†Ô∏è Kh√¥ng g·ª≠i ƒë∆∞·ª£c snapshot ngay: {e}")
        return

    if arg == "stop":
        st.settings.m5_report_enabled = False
        storage.put_user(uid, st)
        await update.message.reply_text("‚è∏ ƒê√É T·∫ÆT M5 report.")
        return

# ================== /autolog ==================
async def autolog_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _uid(update)
    try:
        from core import auto_trade_engine as ae
    except Exception as e:
        await update.message.reply_text(f"Kh√¥ng import ƒë∆∞·ª£c auto_trade_engine: {e}")
        return

    txt = None

    # 1) ∆Øu ti√™n: getter ch√≠nh th·ª©c t·ª´ engine (n·∫øu c√≥)
    try:
        getter = getattr(ae, "get_last_decision_text", None)
        if callable(getter):
            txt = getter(uid)
    except Exception:
        txt = None

    # 2) Fallback: map n·ªôi b·ªô _last_decision_text
    if not txt:
        try:
            last_map = getattr(ae, "_last_decision_text", None)
            if isinstance(last_map, dict):
                txt = last_map.get(uid)
        except Exception:
            txt = None

    # 3) Fallback nh·∫π: hi·ªÉn th·ªã slot M5 g·∫ßn nh·∫•t (n·∫øu engine ch∆∞a l∆∞u log)
    if not txt:
        try:
            slot_map = getattr(ae, "_last_m5_slot_sent", None)
            if isinstance(slot_map, dict) and uid in slot_map:
                txt = f"Tick g·∫ßn nh·∫•t (M5 slot) = {slot_map[uid]} (engine ch∆∞a l∆∞u full text cho tick n√†y)."
        except Exception:
            txt = None

    if not txt:
        await update.message.reply_text("Ch∆∞a c√≥ tick AUTO n√†o ch·∫°y cho user n√†y (ho·∫∑c engine ch∆∞a l∆∞u log).")
        return

    # B·∫£o v·ªá gi·ªõi h·∫°n Telegram (kho·∫£ng < 4000 k√Ω t·ª±)
    if len(txt) > 3500:
        txt = txt[:3500] + "\n‚Ä¶(r√∫t g·ªçn)‚Ä¶"

    await update.message.reply_text(f"üìú Auto log g·∫ßn nh·∫•t:\n{txt}")


async def approve_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /approve <pending_id>
    - MANUAL duy·ªát: th·ª±c thi ƒëa s√†n (SINGLE_ACCOUNT + ACCOUNTS_JSON).
    - Broadcast theo format th·ªëng nh·∫•t, Mode: "Manual".
    - Entry hi·ªÉn th·ªã l·∫•y t·ª´ Binance Spot; kh·ªõp l·ªánh theo futures t·ª´ng s√†n.
    """
    import os, json
    from config import settings as _S
    from core.trade_executor import ExchangeClient, calc_qty, auto_sl_by_leverage

    msg = update.effective_message
    uid = update.effective_user.id if update.effective_user else 0

    if not context.args:
        await msg.reply_text("D√πng: /approve <pending_id>"); return
    pend_id = context.args[0].strip()

    st = storage.get_user(uid)
    if not getattr(st, "pending", None) or str(st.pending.id) != pend_id:
        await msg.reply_text("Kh√¥ng c√≥ pending ho·∫∑c sai ID."); return

    side = str(st.pending.side or "").upper()
    if side not in ("LONG","SHORT"):
        await msg.reply_text("Pending kh√¥ng c√≥ side h·ª£p l·ªá."); return
    side_long = (side == "LONG")
    pair = st.settings.pair or getattr(_S, "PAIR", "BTC/USDT")

    # QUOTA precheck
    ok_quota, why, tide_label, tkey, used = _quota_precheck_and_label(st)
    if not ok_quota:
        await msg.reply_text(why); return

    # user settings
    risk_percent = float(st.settings.risk_percent)
    leverage     = int(st.settings.leverage)

    # SPOT entry for display
    entry_spot = _binance_spot_entry(pair)

    # accounts
    try:
        ACCOUNTS = getattr(_S, "ACCOUNTS", [])
        if not isinstance(ACCOUNTS, list): ACCOUNTS = []
    except Exception:
        try:
            ACCOUNTS = json.loads(os.getenv("ACCOUNTS_JSON","[]"))
            if not isinstance(ACCOUNTS, list): ACCOUNTS = []
        except Exception:
            ACCOUNTS = []
    SINGLE_ACCOUNT = getattr(_S, "SINGLE_ACCOUNT", None)
    base = ([SINGLE_ACCOUNT] if SINGLE_ACCOUNT else []) + ACCOUNTS

    # exec
    results = []
    for acc in base:
        try:
            exid   = str(acc.get("exchange") or "").lower()
            name   = acc.get("name","default")
            api    = acc.get("api_key") or ""
            secret = acc.get("api_secret") or ""
            testnet= bool(acc.get("testnet", False))
            pair_u = acc.get("pair") or pair

            cli = ExchangeClient(exid, api, secret, testnet)
            px  = await cli.ticker_price(pair_u)
            if not px or px <= 0:
                results.append(f"‚Ä¢ {name} | {exid} | {pair_u} ‚Üí ERR: Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° futures.")
                continue

            bal = await cli.balance_usdt()
            qty = calc_qty(bal, risk_percent, leverage, px, float(os.getenv("LOT_STEP_FALLBACK","0.001")))

            # n·∫øu pending c√≥ SL/TP th√¨ d√πng; kh√¥ng th√¨ auto theo leverage
            if (st.pending.sl is None) or (st.pending.tp is None):
                sl_use, tp_use = auto_sl_by_leverage(px, side, leverage)
            else:
                sl_use, tp_use = float(st.pending.sl), float(st.pending.tp)

            try: await cli.set_leverage(pair_u, leverage)
            except Exception: pass

            r = await cli.market_with_sl_tp(pair_u, side_long, qty, sl_use, tp_use)
            results.append(f"‚Ä¢ {name} | {exid} | {pair_u} ‚Üí {r.message}")

            if getattr(r, "ok", False):
                btxt = _fmt_exec_broadcast(
                    pair=pair_u.replace(":USDT",""),
                    side=side,
                    acc_name=name, ex_id=exid,
                    lev=leverage, risk=risk_percent, qty=qty,
                    entry_spot=(entry_spot or px),
                    sl=sl_use, tp=tp_use,
                    tide_label=tide_label, mode_label="Manual",
                )
                await _broadcast_html(btxt)

        except Exception as e:
            results.append(f"‚Ä¢ {acc.get('name','?')} | ERR: {e}")

    # clear pending & QUOTA commit (1 l·∫ßn)
    st.pending = None
    _quota_commit(st, tkey, used, uid)

    await msg.reply_text(f"‚úÖ ƒê√£ APPROVE #{pend_id} ‚Äî {pair} {side}\n" + "\n".join(results))


async def reject_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _uid(update)
    st = storage.get_user(uid)
    if st.pending and context.args and context.args[0] == st.pending.id:
        st.pending = None
        storage.put_user(uid, st)
        await update.message.reply_text("ƒê√£ t·ª´ ch·ªëi t√≠n hi·ªáu.")
    else:
        await update.message.reply_text("Kh√¥ng c√≥ pending ho·∫∑c sai ID.")

# ==== /close (ƒëa t√†i kho·∫£n: Binance/BingX/...) ====
async def close_cmd(update, context):
    """
    /close                -> ƒë√≥ng 100% tr√™n t·∫•t c·∫£ account trong ACCOUNTS_JSON
    /close 50             -> ƒë√≥ng 50% t·∫•t c·∫£ account
    /close bingx_test     -> ƒë√≥ng 100% ri√™ng account 'bingx_test'
    /close 25 bingx_test  -> ƒë√≥ng 25% ri√™ng 'bingx_test' (ho·∫∑c: /close bingx_test 25)
    """
    msg = update.effective_message
    pair = os.getenv("PAIR", "BTC/USDT")

    # parse args
    args = context.args if hasattr(context, "args") else []
    percent = 100.0
    account = None

    def _is_percent(s: str) -> bool:
        try:
            x = float(s)
            return 0.0 <= x <= 100.0
        except:
            return False

    if args:
        a0 = args[0]
        if _is_percent(a0):
            percent = float(a0)
            if len(args) >= 2:
                account = args[1]
        else:
            account = a0
            if len(args) >= 2 and _is_percent(args[1]):
                percent = float(args[1])

    try:
        if account:
            res = await close_position_on_account(account, pair, percent)
            ok = res.get("ok", False)
            text = f"ƒê√£ c·ªë g·∫Øng ƒë√≥ng {percent:.0f}% v·ªã th·∫ø tr√™n <b>{account}</b> ({pair}): {res.get('message','')}"
            await msg.reply_text(text, parse_mode="HTML")
        else:
            results = await close_position_on_all(pair, percent)
            lines = [f"ƒê√≥ng {percent:.0f}% v·ªã th·∫ø ({pair}) tr√™n T·∫§T C·∫¢ t√†i kho·∫£n:"]
            for i, r in enumerate(results, 1):
                ok = r.get("ok", False)
                lines.append(f"‚Ä¢ #{i} ‚Üí {r.get('message','ok' if ok else 'fail')}")
            await msg.reply_text("\n".join(lines))
    except Exception as e:
        await msg.reply_text(f"‚ùå L·ªói /close: {e}")


async def daily_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _uid(update)
    st = storage.get_user(uid)
    d = now_vn().date().isoformat()
    text = format_daily_moon_tide_report(d, float(st.settings.tide_window_hours))
    await update.message.reply_text(text)

# ================== Custom Commands (b·ªï sung) ==================
async def aboutme_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    about_text = """
üí° **Trading l√† m√¥n t√¨m hi·ªÉu v·ªÅ b·∫£n th√¢n:**
- **Th√¢n - T√¢m - Tr√≠**
- Ph·∫£i lu√¥n v·∫≠n h√†nh 3 h·ªá th·ªëng: **QLV - T√ÇM L√ù - HTGD**
 üßç‚Äç‚ôÇÔ∏è *TH√ÇN ‚Äì Qu·∫£n l√Ω v·ªën (S·ªë 8 ‚Äì Tr∆∞·ªüng th√†nh)*
 üßò‚Äç‚ôÇÔ∏è *T√ÇM ‚Äì T√¢m l√Ω (S·ªë 2 ‚Äì C√¢n b·∫±ng c·∫£m x√∫c)*
 üß† *TR√ç ‚Äì H·ªá th·ªëng giao d·ªãch (S·ªë 3 ‚Äì Ch·ªß ƒë·∫°o)*

üë§ **H·ªÜ TH·ªêNG: User #Me : 4 M√πa & 4 Phase Moon & 4 Tides**
 
üßç‚Äç‚ôÇÔ∏è *TH√ÇN ‚Äì Qu·∫£n l√Ω v·ªën (S·ªë 8 ‚Äì Tr∆∞·ªüng th√†nh)*
1. S·ª©c kh·ªèe b·∫°n c√≥ ƒëang ·ªïn kh√¥ng ? H√¥m nay ƒë√£ v·∫≠n ƒë·ªông min 15 ph√∫t ch∆∞a ?
2. Qu·∫£n l√Ω V·ªën l√†: Gi·ªØ ƒë·ªÅu vol ( V·ªën x ƒê√≤n B·∫©y , SL ch·ªãu ƒë∆∞·ª£c l√† gi·ªëng nhau)
3. Nguy√™n t·∫Øc QLV: 8:8:8/ (2:3:5) theo pytago trong m·ªôt m·∫°ng/ t·ªïng 8) 
4. S·ªë l·ªánh: T·ªëi ƒëa 8 l·ªánh/ng√†y - M·ªói gi·ªù th·ªßy tri·ªÅu max 2 l·ªánh
5. T·ª∑ l·ªá R:R > 1.3 (T·ªïng 4) : Ghi s·∫µn target/stop max 50%, kh√¥ng thay ƒë·ªïi sau khi v√†o l·ªánh, n·∫øu n√≥ ƒëi ng∆∞·ª£c Sl 50% v·∫´n OK - ph·∫£i ƒëo % ƒë·ªÉ t√≠nh ƒë√≤n b·∫©y
6. ƒê√≤n b·∫©y: X17,X26,X35,X44 (Nh·∫Øc v·ªÅ con s·ªë tr∆∞·ªüng th√†nh 8) : Th√¢n d√≤ X17 - 20% v·ªën, Tr√≠  50% T√≠n hi·ªáu t·ªët th√¨ X26 / X√°c su·∫•t cao, SL ng·∫Øn X35~X44

üßò‚Äç‚ôÇÔ∏è *T√ÇM ‚Äì T√¢m l√Ω (S·ªë 2 ‚Äì C√¢n b·∫±ng c·∫£m x√∫c)*
1. B·∫°n KO b·ªã stress hay cƒÉng th·∫≥ng ch·ª© ? H√¥m nay ƒë√£ thi·ªÅn min 15 ph√∫t ch∆∞a ?
2. T√¢m l√Ω tr∆∞·ªõc l·ªánh : Checklist tr∆∞·ªõc l·ªánh + Th·ªü 8 l·∫ßn ƒë·ªÉ t·ªânh th·ª©c tr∆∞·ªõc click
3. T√¢m l√Ω trong l·ªánh : N·∫øu ƒëang ho·∫£ng lo·∫°n "V√¥ t√°c", Ko ƒë∆∞·ª£c ƒëi th√™m l·ªánh ho·∫∑c DCA
4. T√¢m l√Ω sau l·ªánh: T·ªïng k·∫øt 1 ƒëi·ªÅu t·ªët + 1 b√†i h·ªçc m·ªói cu·ªëi ng√†y
5. T√¢m l√Ω h·ªìi ph·ª•c sau th·∫Øng/Thua: D·ª´ng giao d·ªãch 48h = 2 ng√†y ƒë·ªÉ b√¨nh tƒ©nh t√¢m khi thua

üß† *TR√ç ‚Äì H·ªá th·ªëng giao d·ªãch (S·ªë 3 ‚Äì Ch·ªß ƒë·∫°o)*
1. B·∫°n c√≥ ƒëang t·ªânh t√°o v√† s√°ng su·ªët kh√¥ng ? H√¥m nay ƒë√£ thi·ªÅn min 15 ph√∫t ch∆∞a
2. Ch·ªâ BTC/USDT
3. Theo trend ch√≠nh (D, H4) - Sonic R " TREND IS YOUR FRIEND "
4. CTTT ƒêa Khung M30,M5/Fibo 50%/ Wyckoff -Phase-Spring/ M√¥ H√¨nh /KC-HT l√Ω t∆∞·ªüng/Volumn DGT/ SQ9 -9 c√¢y n·∫øn/ N√¢ng cao Sonic R+Elliot (ƒÉn s√≥ng 3)+Wyckoff
5. Phase trƒÉng - Bi·∫øn ƒë·ªông theo t·ª© xung theo ƒë·ªô r·ªçi (0 - 25 - 50 - 75 - 100)
6. V√πng gi·ªù th·ªßy tri·ªÅu ¬±1h "T√≠n hi·ªáu th∆∞·ªùng x√°c ƒë·ªãnh sau khi h·∫øt v√πng th·ªßy tri·ªÅu"
7. ƒê·ªìng pha RSI & EMA RSI (ƒëa khung)
8. Chi·∫øn l∆∞·ª£c 1 or ph√° n·ªÅn gi√° Down M5 or Lu√¥n h·ªèi ƒë√£ "C·∫†N CUNG" ch∆∞a ?
9. Stoch RSI c√¥ng t·∫Øc x√°c nh·∫≠n b·∫≠t

üìù *L·ªùi nh·∫Øc th√™m t·ª´ Nh√¢n s·ªë h·ªçc:*
10. S·ªë ch·ªß ƒë·∫°o 3: H·∫°n ch·∫ø m·∫°ng x√£ h·ªôi, t·∫≠p trung y√™u b·∫£n th√¢n, h·∫°n ch·∫ø ph√¢n t√°n nƒÉng l∆∞·ª£ng
11. 4 s·ªë 11: Vi·∫øt nh·∫≠t k√Ω, Ki·ªÉm tra checklist tr∆∞·ªõc v√†o l·ªánh, Ki√™n tr√¨ 1 h·ªá th·ªëng giao d·ªãch, H·∫°n ch·∫ø c·ªông ƒë·ªìng
12. Ki·∫øm c·ªßi 3 nƒÉm ƒë·ªët trong 1h r·∫•t nhi·ªÅu 
13. C·∫£nh gi√°c: "ƒê√£ b·ªã ch√°y nhi·ªÅu l·∫ßn v√¨ vi ph·∫°m HTGD, tr·∫£ th√π, DCA khi ho·∫£ng lo·∫°n"
14. Kh√¥ng ƒë∆∞·ª£c v√†o l·ªánh b·∫±ng ƒëi·ªán tho·∫°i ‚Äî Ph·∫£i ch·∫≠m l·∫°i, kh√¥ng h·∫•p t·∫•p
15. "YOU ARE WHAT YOU REPEAT"
16. Bi√™n ƒë·ªô dao ƒë·ªông Khung B√© / H4 / D1 / W ‚Äî ƒëang ntn ‚Äî ƒêi·ªÅu ch·ªânh c√°i th√¨ sao?

üìà **M·ª§C TI√äU:**
- Phi√™n b·∫£n ·ªïn ƒë·ªãnh, v·ªØng t√¢m ‚Äì t·ª± do th·∫≠t s·ª± t·ª´ k·ª∑ lu·∫≠t

üöÄ **TR·∫†NG TH√ÅI HI·ªÜN T·∫†I:**
- Phi√™n b·∫£n 3.1.4 ‚Äì *ƒêang c·∫≠p nh·∫≠t m·ªói ng√†y*
""".strip()
    # D√πng Markdown ƒë·ªÉ gi·ªØ format in ƒë·∫≠m/nghi√™ng nh∆∞ b·∫°n so·∫°n
    await update.message.reply_text(about_text, parse_mode="Markdown")

async def journal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    form_link = "https://docs.google.com/forms/d/e/1FAIpQLSeXQmxn8X9BCUC_StiOid1wFCue_19y3hEQBTHULnNHl7ShSg/viewform"
    await update.message.reply_text(f"üìã M·ªùi b·∫°n ƒëi·ªÅn nh·∫≠t k√Ω giao d·ªãch t·∫°i ƒë√¢y:\n{form_link}")

async def recovery_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    checklist_text = (
        "üß† *Ph·ª•c h·ªìi t√¢m l√Ω sau thua l·ªó ‚Äì V·∫•n ƒë·ªÅ & Gi·∫£i ph√°p*\n\n"
        "‚ùó *V·∫•n ƒë·ªÅ 1:* Hay tr·∫£ th√π, ƒÉn thua v·ªõi th·ªã tr∆∞·ªùng\n"
        "üîß *Gi·∫£i ph√°p:* T·∫≠p kh√¥ng v√†o th√™m l·ªánh ƒë·ªÉ ƒÉn thua or DCA v√† tu√¢n th·ªß SL ƒë√£ ƒë·∫∑t\n\n"
        "‚ùó *V·∫•n ƒë·ªÅ 2:* C·ªë ch·∫•p v·∫´n b·∫≠t m√°y t√≠nh ƒë·ªÉ t√¨m th√™m k√®o v√†o l·∫°i ngay t·ª©c th√¨ or ph√° v·ª° HTGD\n"
        "üîß *Gi·∫£i ph√°p:* R√®n t√≠nh r·ªùi b·ªè m√°y t√≠nh, nh√¨n chart - quay v·ªÅ quan s√°t c·∫£m x√∫c or ki·ªÉm ƒëi·ªÉm l·∫°i HTGD\n\n"
        "‚ùó *V·∫•n ƒë·ªÅ 3:* Kh√¥ng c√≥ c∆° ch·∫ø ph·ª•c h·ªìi c·∫£m x√∫c\n"
        "üîß *Gi·∫£i ph√°p:* D·ª´ng giao d·ªãch 48h = 2 ng√†y, vi·∫øt ra c·∫£m x√∫c, h√≠t th·ªü s√¢u m·ªói ng√†y\n\n"
        "‚ùó *V·∫•n ƒë·ªÅ 4:* T·∫≠p trung qu√° nhi·ªÅu v√†o k·∫øt qu·∫£\n"
        "üîß *Gi·∫£i ph√°p:* ƒê·∫∑t m·ª•c ti√™u l√† t√≠nh nh·∫•t qu√°n, kh√¥ng ph·∫£i l·ª£i nhu·∫≠n\n\n"
        "‚ùó *V·∫•n ƒë·ªÅ 5:* T·ª± tr·ª´ng ph·∫°t khi sai\n"
        "üîß *Gi·∫£i ph√°p:* Xem sai l·∫ßm nh∆∞ d·ªØ li·ªáu c·∫£i thi·ªán h·ªá th·ªëng, kh√¥ng ph√°n x√©t b·∫£n th√¢n , h√†nh ƒë·ªông kh√°c ngu ng·ªëc ·∫£nh h∆∞·ªüng ƒë·∫øn c·∫£m x√∫c\n\n"
        "‚ùó *V·∫•n ƒë·ªÅ 6:* Thi·∫øu h·ªá th·ªëng r√®n t√¢m\n"
        "üîß *Gi·∫£i ph√°p:* M·ªói s√°ng vi·∫øt 3 ƒëi·ªÅu bi·∫øt ∆°n, m·ªói t·ªëi ghi l·∫°i c·∫£m x√∫c ‚Äì luy·ªán t√¢m nh∆∞ luy·ªán k·ªπ thu·∫≠t\n\n"
        "‚ùó *V·∫•n ƒë·ªÅ 7:* R√† So√°t v√† Tu√¢n Th·ªß 3 H·ªá Th·ªëng : TH√ÇN (QLV-8) - T√ÇM (C·∫¢M X√öC-2) - TR√ç(HTGD-3)\n"
        "üîß *Gi·∫£i ph√°p:* R√† So√°t v√† Tu√¢n Th·ªß 3 H·ªá Th·ªëng : TH√ÇN (QLV-8) - T√ÇM (C·∫¢M X√öC-2) - TR√ç(HTGD-3)\n\n"
        "‚úÖ *H√£y ch·ªâ quay l·∫°i th·ªã tr∆∞·ªùng khi 3 h·ªá th·ªëng TH√ÇN - T√ÇM - TR√ç ƒë√£ b√¨nh ·ªïn.*"
    )
    await update.message.reply_text(checklist_text.strip(), parse_mode="Markdown")

# ================== Error handler ==================
async def _on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    try:
        err = context.error
        print(f"[TG ERROR] {err}")
        if isinstance(update, Update) and update.effective_chat:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ö†Ô∏è L·ªói: {err}")
    except Exception:
        pass

# ================== App builder ==================
def build_app():
    token = TELEGRAM_BOT_TOKEN
    if not token:
        raise RuntimeError("Missing TELEGRAM_BOT_TOKEN")

    async def _post_init(app: Application):
        try:
            await app.bot.delete_webhook(drop_pending_updates=True)
            print("[BOOT] Webhook deleted (switching to polling).")
        except Exception as e:
            print(f"[BOOT] delete_webhook warn: {e}")

        app.bot_data["storage"] = storage

        async def _spawn_after_start():
            await asyncio.sleep(0)
            print("[M5] Background m5_report_loop() started.")
            app.create_task(m5_report_loop(app, storage))
            print("[AUTO] Background start_auto_loop() started.")
            app.create_task(start_auto_loop(app, storage))
            print("[AUTO PRESET] Background auto preset daemon started.")
            app.create_task(_auto_preset_daemon(app))

        asyncio.get_event_loop().create_task(_spawn_after_start())

    app = ApplicationBuilder().token(token).job_queue(None).post_init(_post_init).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("preset", preset_cmd))
    app.add_handler(CommandHandler("setenv", setenv_cmd))
    app.add_handler(CommandHandler("setenv_status", setenv_status_cmd))
    app.add_handler(CommandHandler("mode", mode_cmd))
    app.add_handler(CommandHandler("settings", settings_cmd))
    app.add_handler(CommandHandler("tidewindow", tidewindow_cmd))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("order", order_cmd))
    app.add_handler(CommandHandler("report", report_cmd))
    app.add_handler(CommandHandler("m5report", m5report_cmd))
    app.add_handler(CommandHandler("approve", approve_cmd))
    app.add_handler(CommandHandler("reject", reject_cmd))
    app.add_handler(CommandHandler("close", close_cmd))
    app.add_handler(CommandHandler("daily", daily_cmd))
    app.add_handler(CommandHandler("autolog", autolog_cmd))
    app.add_handler(CommandHandler("aboutme", aboutme_command))
    app.add_handler(CommandHandler("journal", journal_command))
    app.add_handler(CommandHandler("recovery_checklist", recovery_command))
    app.add_error_handler(_on_error)
    return app




# ===== Auto preset helpers (map P1..P4 theo Moon API) ==========================
def _preset_mode() -> str:
    return (os.getenv("PRESET_MODE", "auto") or "auto").upper()

def _apply_preset_code_runtime(pcode: str) -> bool:
    preset = PRESETS.get(pcode)
    if not preset:
        return False
    # 1) Ghi ENV
    for k, v in preset.items():
        os.environ[k] = _bool_str(v) if isinstance(v, bool) else str(v)
    # 2) B∆°m runtime sang auto_trade_engine n·∫øu c√≥
    applied = False
    try:
        from core import auto_trade_engine as ae
        fn = getattr(ae, "apply_runtime_overrides", None)
        if callable(fn):
            fn({k: os.environ[k] for k in preset.keys()})
            applied = True
        else:
            for k, sval in os.environ.items():
                if k in preset and hasattr(ae, k):
                    typ = type(getattr(ae, k))
                    if typ is bool:
                        setattr(ae, k, sval.strip().lower() in ("1","true","yes","on"))
                    elif typ is int:
                        setattr(ae, k, int(float(sval)))
                    elif typ is float:
                        setattr(ae, k, float(sval))
                    else:
                        setattr(ae, k, sval)
                    applied = True
    except Exception:
        pass
    return applied

async def _apply_auto_preset_now(app=None, silent: bool = True):
    pcode, meta = resolve_preset_code(None)
    ok = _apply_preset_code_runtime(pcode)
    if (not silent) and app:
        try:
            # ∆Øu ti√™n AUTO_DEBUG_CHAT_ID n·∫øu l√† s·ªë; fallback d√πng TELEGRAM_BROADCAST_CHAT_ID
            raw = os.getenv("AUTO_DEBUG_CHAT_ID", "")
            if raw.isdigit():
                chat_id = int(raw)
            else:
                chat_id = int(TELEGRAM_BROADCAST_CHAT_ID) if str(TELEGRAM_BROADCAST_CHAT_ID).lstrip("-").isdigit() else None
        except Exception:
            chat_id = None
        if chat_id:
            txt = (
                "üåï Auto preset: "
                f"<b>{html.escape(meta.get('phase') or '')}</b> ‚Äî {meta.get('illum')}% ({html.escape(meta.get('direction') or '')})\n"
                f"‚Üí √Åp d·ª•ng <b>{pcode}</b>: {html.escape(meta.get('label') or '')}"
            )
            try:
                await app.bot.send_message(chat_id=chat_id, text=txt, parse_mode="HTML")
            except Exception:
                pass


async def _auto_preset_daemon(app: Application):
    """M·ªói ng√†y 00:05 JST: n·∫øu PRESET_MODE=AUTO th√¨ t·ª± ƒë·ªïi preset theo Moon m·ªõi."""
    await asyncio.sleep(1)
    if _preset_mode() == "AUTO":
        await _apply_auto_preset_now(app, silent=True)
    while True:
        now = datetime.now(TOKYO_TZ)
        nxt = (now + timedelta(days=1)).replace(hour=0, minute=5, second=0, microsecond=0)
        sleep_s = max(60.0, (nxt - now).total_seconds())
        await asyncio.sleep(sleep_s)
        if _preset_mode() == "AUTO":
            await _apply_auto_preset_now(app, silent=True)
