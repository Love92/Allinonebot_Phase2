# tg/join_gate.py
from __future__ import annotations

import os
import re
import json
import time
import logging
from datetime import datetime, timedelta, timezone
from typing import Dict, Optional, Set, Tuple, List

from telegram import Update, ChatPermissions
from telegram.ext import (
    Application,
    ContextTypes,
    ChatJoinRequestHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

log = logging.getLogger(__name__)


# ============== ENV HELPERS ==============

def _env_int(name: str, default: Optional[int] = None) -> Optional[int]:
    v = os.getenv(name, "").strip()
    try:
        if v and (v.lstrip("-").isdigit()):
            return int(v)
    except Exception:
        pass
    return default

def _env_bool(name: str, default: bool = False) -> bool:
    v = (os.getenv(name, "") or "").strip().lower()
    if v in ("1", "true", "yes", "on", "y"): return True
    if v in ("0", "false", "no", "off", "n"): return False
    return bool(default)

def _env_csv(name: str) -> List[str]:
    v = os.getenv(name, "") or ""
    if not v.strip(): return []
    return [p.strip().lower() for p in v.split(",") if p.strip()]

def _env_str(name: str, default: str = "") -> str:
    v = os.getenv(name, None)
    return default if v is None else str(v)


# ============== CONFIG (ENV) ==============
# Chat IDs √¢m cho group & channel VIP
VIP_GROUP_ID: Optional[int]   = _env_int("JOIN_GATE_VIP_GROUP_ID", None)
VIP_CHANNEL_ID: Optional[int] = _env_int("JOIN_GATE_VIP_CHANNEL_ID", None)

# N∆°i nh·∫≠n c·∫£nh b√°o (group qu·∫£n tr·ªã)
ADMIN_ALERT_CHAT_ID: Optional[int] = _env_int("JOIN_GATE_ADMIN_ALERT_CHAT_ID", None)

# Admin IDs (ƒë∆∞·ª£c d√πng l·ªánh /approve_*, /decline_*, /vip_link_*, /grant, /revoke, /subinfo, /subs_dump, /subs_reload)
ADMIN_IDS: Set[int] = set()
for s in _env_csv("JOIN_GATE_ADMIN_IDS"):
    if s.lstrip("-").isdigit():
        ADMIN_IDS.add(int(s))

# Anti-spam cho GROUP
ANTISPAM_ON: bool = _env_bool("JOIN_GATE_ANTISPAM_ON", True)
ALLOW_LINKS: bool = _env_bool("JOIN_GATE_ALLOW_LINKS", False)  # n·∫øu False: xo√° m·ªçi link kh√¥ng n·∫±m whitelist
ALLOWED_LINK_DOMAINS: Set[str] = set(_env_csv("JOIN_GATE_ALLOWED_LINK_DOMAINS"))  # v√≠ d·ª•: "t.me/yourvip,binance.com"
LINK_SPAM_MAX: int = int(_env_int("JOIN_GATE_LINK_SPAM_MAX", 2) or 2)  # qu√° s·ªë l·∫ßn trong window th√¨ block
LINK_SPAM_WINDOW_S: int = int(_env_int("JOIN_GATE_LINK_SPAM_WINDOW_S", 300) or 300)  # 5 ph√∫t
AUTOBAN_ON: bool = _env_bool("JOIN_GATE_AUTOBAN_ON", True)
AUTO_DELETE_LINKS: bool = _env_bool("JOIN_GATE_AUTODELETE_LINKS", True)

# DM h∆∞·ªõng d·∫´n khi join-request
DM_TEXT: str = _env_str(
    "JOIN_GATE_DM_TEXT",
    "Ch√†o b·∫°n!\n\n"
    "ƒê·ªÉ v√†o VIP, vui l√≤ng **tr·∫£ l·ªùi tin nh·∫Øn n√†y** k√®m:\n"
    "‚Ä¢ S√†n & UID b·∫°n ƒë√£ follow (Binance/BingX)\n"
    "‚Ä¢ ·∫¢nh/screenshot x√°c nh·∫≠n ƒë√£ follow\n\n"
    "Sau khi b·∫°n g·ª≠i, admin s·∫Ω duy·ªát y√™u c·∫ßu c·ªßa b·∫°n."
)

# Subscription (thu ph√≠/gi·ªØ h·∫°n)
SUBS_DB_PATH: str = _env_str("JOIN_GATE_SUBS_DB", "vip_members.json")
DEFAULT_SUB_DAYS: int = int(_env_int("JOIN_GATE_DEFAULT_SUBS_DAYS", 30) or 30)


# ============== RUNTIME STATE ==============
# Spam buffer: user_id -> list[timestamps] (s·ªë l·∫ßn d√≠nh link trong window)
_LINK_HITS: Dict[int, List[float]] = {}

# Membership DB: user_id -> {"until": "2025-10-01T00:00:00Z", "notes": "...", "granted_by": 123456}
_MEMBERS: Dict[str, Dict[str, str]] = {}


# ============== UTILITIES ==============

LINK_RE = re.compile(r'(https?://[^\s]+|www\.[^\s]+|t\.me/[^\s]+)', re.IGNORECASE)

def _now_utc() -> datetime:
    return datetime.now(timezone.utc)

def _iso(dt: datetime) -> str:
    return dt.astimezone(timezone.utc).replace(microsecond=0).isoformat()

def _load_members():
    global _MEMBERS
    try:
        with open(SUBS_DB_PATH, "r", encoding="utf-8") as f:
            _MEMBERS = json.load(f)
            if not isinstance(_MEMBERS, dict):
                _MEMBERS = {}
    except Exception:
        _MEMBERS = {}

def _save_members():
    try:
        with open(SUBS_DB_PATH, "w", encoding="utf-8") as f:
            json.dump(_MEMBERS, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.warning("save members failed: %s", e)

def _is_admin(uid: int) -> bool:
    return True if not ADMIN_IDS else (uid in ADMIN_IDS)

def _in_vip_scope(chat_id: int) -> bool:
    return (VIP_GROUP_ID is not None and chat_id == VIP_GROUP_ID) or (VIP_CHANNEL_ID is not None and chat_id == VIP_CHANNEL_ID)

def _domain_in_whitelist(url: str) -> bool:
    if not ALLOWED_LINK_DOMAINS:
        return False
    u = url.lower()
    # Cho ph√©p n·∫øu b·∫•t k·ª≥ domain trong whitelist l√† substring
    return any(dom in u for dom in ALLOWED_LINK_DOMAINS)

async def _alert_admin(context: ContextTypes.DEFAULT_TYPE, text: str):
    if ADMIN_ALERT_CHAT_ID:
        try:
            await context.bot.send_message(ADMIN_ALERT_CHAT_ID, text)
        except Exception:
            pass


# ============== JOIN REQUEST HANDLERS ==============

async def on_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω join-request cho c·∫£ GROUP & CHANNEL ƒë√£ c·∫•u h√¨nh."""
    req = update.chat_join_request  # type: ignore[attr-defined]
    if not req:
        return

    chat_id = req.chat.id
    if not _in_vip_scope(chat_id):
        return

    user = req.from_user
    uid = user.id
    uname = f"@{user.username}" if user and user.username else (user.full_name if user else str(uid))

    # DM h∆∞·ªõng d·∫´n (n·∫øu user ch∆∞a chat tr∆∞·ªõc v·ªõi bot c√≥ th·ªÉ fail)
    try:
        await context.bot.send_message(chat_id=uid, text=DM_TEXT, parse_mode="Markdown")
    except Exception:
        pass

    # B√°o admin
    chat_kind = "GROUP" if (VIP_GROUP_ID is not None and chat_id == VIP_GROUP_ID) else "CHANNEL"
    await _alert_admin(context,
        f"üîî Join request v√†o VIP {chat_kind}\n"
        f"‚Ä¢ User: {uname} (id={uid})\n"
        f"‚Ä¢ Chat: {req.chat.title} (id={chat_id})\n\n"
        f"Admin d√πng:\n"
        f"/approve_{chat_kind.lower()} {uid}\n"
        f"/decline_{chat_kind.lower()} {uid}"
    )


# ============== ADMIN COMMANDS ‚Äî APPROVE / DECLINE ==============

async def _approve_common(update: Update, context: ContextTypes.DEFAULT_TYPE, target_chat_id: Optional[int], label: str):
    if not _check_admin(update): return
    if target_chat_id is None:
        await _safe_reply(update, f"{label}: ch∆∞a c·∫•u h√¨nh chat id.")
        return
    if not context.args:
        await _safe_reply(update, f"D√πng: /approve_{label.lower()} <user_id>")
        return
    try:
        target = int(context.args[0])
        await context.bot.approve_chat_join_request(chat_id=target_chat_id, user_id=target)
        await _safe_reply(update, f"‚úÖ ƒê√£ approve user {target} v√†o {label}.")
        try:
            await context.bot.send_message(target, f"‚úÖ Y√™u c·∫ßu join v√†o {label} ƒë√£ ƒë∆∞·ª£c duy·ªát. Ch√†o m·ª´ng!")
        except Exception:
            pass
    except Exception as e:
        await _safe_reply(update, f"‚ùå Approve l·ªói: {e}")

async def _decline_common(update: Update, context: ContextTypes.DEFAULT_TYPE, target_chat_id: Optional[int], label: str):
    if not _check_admin(update): return
    if target_chat_id is None:
        await _safe_reply(update, f"{label}: ch∆∞a c·∫•u h√¨nh chat id.")
        return
    if not context.args:
        await _safe_reply(update, f"D√πng: /decline_{label.lower()} <user_id>")
        return
    try:
        target = int(context.args[0])
        await context.bot.decline_chat_join_request(chat_id=target_chat_id, user_id=target)
        await _safe_reply(update, f"üö´ ƒê√£ t·ª´ ch·ªëi user {target} v√†o {label}.")
        try:
            await context.bot.send_message(target, f"‚ùå Y√™u c·∫ßu join v√†o {label} ƒë√£ b·ªã t·ª´ ch·ªëi.")
        except Exception:
            pass
    except Exception as e:
        await _safe_reply(update, f"‚ùå Decline l·ªói: {e}")

async def approve_group_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _approve_common(update, context, VIP_GROUP_ID, "GROUP")

async def decline_group_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _decline_common(update, context, VIP_GROUP_ID, "GROUP")

async def approve_channel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _approve_common(update, context, VIP_CHANNEL_ID, "CHANNEL")

async def decline_channel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _decline_common(update, context, VIP_CHANNEL_ID, "CHANNEL")


# ============== ADMIN COMMANDS ‚Äî INVITE LINKS ==============

async def _new_link_common(update: Update, context: ContextTypes.DEFAULT_TYPE, target_chat_id: Optional[int], label: str):
    if not _check_admin(update): return
    if target_chat_id is None:
        await _safe_reply(update, f"{label}: ch∆∞a c·∫•u h√¨nh chat id.")
        return
    try:
        link = await context.bot.create_chat_invite_link(
            chat_id=target_chat_id,
            creates_join_request=True,
            name=f"VIP {label} Join Request Link",
        )
        await _safe_reply(update, f"üîó Link join-request {label} m·ªõi:\n{link.invite_link}")
    except Exception as e:
        await _safe_reply(update, f"‚ùå T·∫°o link l·ªói: {e}")

async def vip_link_group_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _new_link_common(update, context, VIP_GROUP_ID, "GROUP")

async def vip_link_channel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _new_link_common(update, context, VIP_CHANNEL_ID, "CHANNEL")


# ============== ADMIN COMMANDS ‚Äî SUBS (THU PH√ç/H·∫†N D√ôNG) ==============

def _parse_days(arg: Optional[str]) -> int:
    if not arg: return DEFAULT_SUB_DAYS
    try:
        d = int(arg)
        return d if d > 0 else DEFAULT_SUB_DAYS
    except Exception:
        return DEFAULT_SUB_DAYS

async def grant_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /grant <user_id> [days]
    - G√°n h·∫°n d√πng (days) v√†o DB; bot s·∫Ω t·ª± kick khi h·∫øt h·∫°n.
    - Kh√¥ng t·ª± approve join-request (v√¨ join-request ph·∫£i theo quy tr√¨nh).
    """
    if not _check_admin(update): return
    if not context.args:
        await _safe_reply(update, "D√πng: /grant <user_id> [days]")
        return
    try:
        target = int(context.args[0])
        days = _parse_days(context.args[1] if len(context.args) >= 2 else None)
        until = _now_utc() + timedelta(days=days)
        _MEMBERS[str(target)] = {
            "until": _iso(until),
            "notes": f"granted {days}d",
            "granted_by": str(update.effective_user.id if update.effective_user else 0)
        }
        _save_members()
        await _safe_reply(update, f"‚úÖ ƒê√£ grant user {target} {days} ng√†y (t·ªõi {until.date().isoformat()}).")
        try:
            await context.bot.send_message(target, f"üéüÔ∏è B·∫°n ƒë√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn VIP {days} ng√†y (t·ªõi {until.date().isoformat()}).")
        except Exception:
            pass
    except Exception as e:
        await _safe_reply(update, f"‚ùå Grant l·ªói: {e}")

async def revoke_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /revoke <user_id>
    - Xo√° kh·ªèi DB v√† kick kh·ªèi group/channel (n·∫øu ƒëang trong ƒë√≥).
    """
    if not _check_admin(update): return
    if not context.args:
        await _safe_reply(update, "D√πng: /revoke <user_id>")
        return
    try:
        target = int(context.args[0])
        _MEMBERS.pop(str(target), None)
        _save_members()
        # Kick n·∫øu c√≥ trong group/channel
        await _kick_everywhere(context, target)
        await _safe_reply(update, f"üö´ ƒê√£ revoke user {target}.")
    except Exception as e:
        await _safe_reply(update, f"‚ùå Revoke l·ªói: {e}")

async def subinfo_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /subinfo <user_id>
    """
    if not _check_admin(update): return
    if not context.args:
        await _safe_reply(update, "D√πng: /subinfo <user_id>")
        return
    target = str(context.args[0])
    info = _MEMBERS.get(target)
    if not info:
        await _safe_reply(update, f"‚ÑπÔ∏è User {target} ch∆∞a c√≥ trong DB.")
        return
    await _safe_reply(update, f"User {target}: {json.dumps(info, ensure_ascii=False)}")

async def subs_dump_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Xu·∫•t DB ra text (cho admin)."""
    if not _check_admin(update): return
    await _safe_reply(update, json.dumps(_MEMBERS, ensure_ascii=False, indent=2))

async def subs_reload_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Reload DB t·ª´ file (khi s·ª≠a file th·ªß c√¥ng)."""
    if not _check_admin(update): return
    _load_members()
    await _safe_reply(update, "üîÑ ƒê√£ reload DB t·ª´ file.")

async def _kick_everywhere(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """Kick user kh·ªèi group/channel n·∫øu ƒëang ·ªü trong (ban r·ªìi unban ƒë·ªÉ out)."""
    for cid in [VIP_GROUP_ID, VIP_CHANNEL_ID]:
        if cid is None: continue
        try:
            await context.bot.ban_chat_member(cid, user_id)
            await context.bot.unban_chat_member(cid, user_id)  # unban ƒë·ªÉ v·∫´n c√≥ th·ªÉ join l·∫°i sau
        except Exception:
            pass

async def _subs_cleanup_job(context: ContextTypes.DEFAULT_TYPE):
    """Job ch·∫°y ƒë·ªãnh k·ª≥: kick nh·ªØng user h·∫øt h·∫°n."""
    now = _now_utc()
    expired: List[int] = []
    for k, v in list(_MEMBERS.items()):
        try:
            until = datetime.fromisoformat(v.get("until")).astimezone(timezone.utc)
            if now >= until:
                expired.append(int(k))
        except Exception:
            continue

    for uid in expired:
        await _kick_everywhere(context, uid)
        _MEMBERS.pop(str(uid), None)
        await _alert_admin(context, f"‚è∞ H·∫øt h·∫°n v√† ƒë√£ kick user {uid}.")
    if expired:
        _save_members()


# ============== GROUP ANTI-SPAM (DELETE LINKS, AUTOBAN) ==============

def _extract_links(text: str) -> List[str]:
    if not text: return []
    return LINK_RE.findall(text)

def _record_link_hit(user_id: int) -> int:
    """Tr·∫£ v·ªÅ s·ªë hit trong window sau khi ghi nh·∫≠n m·ªôt hit m·ªõi."""
    now = time.time()
    arr = _LINK_HITS.get(user_id, [])
    # gi·ªØ l·∫°i hit trong c·ª≠a s·ªï
    arr = [t for t in arr if now - t <= LINK_SPAM_WINDOW_S]
    arr.append(now)
    _LINK_HITS[user_id] = arr
    return len(arr)

async def _group_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gi·ªØ group s·∫°ch: xo√° link spam, block n·∫øu v∆∞·ª£t ng∆∞·ª°ng."""
    if not ANTISPAM_ON: return
    msg = update.effective_message
    chat = update.effective_chat
    user = update.effective_user
    if not msg or not chat or not user: return
    if VIP_GROUP_ID is None or chat.id != VIP_GROUP_ID: return
    if user.id in ADMIN_IDS: return  # b·ªè qua admin

    text = msg.text or msg.caption or ""
    links = _extract_links(text)
    if not links:
        return

    # N·∫øu cho ph√©p link, nh∆∞ng ch·ªâ whitelist domain, th√¨ lo·∫°i nh·ªØng link h·ª£p l·ªá
    bad_links = []
    for u in links:
        if ALLOW_LINKS and _domain_in_whitelist(u):
            continue
        bad_links.append(u)

    if not bad_links:
        return

    # Xo√° tin nh·∫Øn ch·ª©a link kh√¥ng h·ª£p l·ªá
    if AUTO_DELETE_LINKS:
        try:
            await msg.delete()
        except Exception:
            pass

    hits = _record_link_hit(user.id)
    warn_txt = (
        f"‚ö†Ô∏è @{user.username or user.id}: Link kh√¥ng ƒë∆∞·ª£c ph√©p trong nh√≥m n√†y."
        f" ({hits}/{LINK_SPAM_MAX} trong {LINK_SPAM_WINDOW_S//60} ph√∫t)"
    )
    await _alert_admin(context, f"[ANTI-SPAM] {warn_txt}\nN·ªôi dung: {text[:200]}")

    # Autoban khi v∆∞·ª£t ng∆∞·ª°ng
    if AUTOBAN_ON and hits >= LINK_SPAM_MAX:
        try:
            await context.bot.ban_chat_member(chat.id, user.id)
            await _alert_admin(context, f"üö´ ƒê√£ block user {user.id} v√¨ spam link.")
        except Exception as e:
            await _alert_admin(context, f"‚ùå Block user {user.id} l·ªói: {e}")


# ============== COMMON HELPERS ==============

def _check_admin(update: Update) -> bool:
    uid = update.effective_user.id if update.effective_user else 0
    if not _is_admin(uid):
        # im l·∫∑ng n·∫øu kh√¥ng ph·∫£i admin
        return False
    return True

async def _safe_reply(update: Update, text: str):
    try:
        await update.message.reply_text(text)
    except Exception:
        try:
            await update.effective_message.reply_text(text)
        except Exception:
            pass


# ============== REGISTRATION ==============

def register_join_gate(app: Application) -> None:
    """
    G·ªçi sau khi build Application ·ªü bot ch√≠nh.
    - Th√™m handler join-request cho c·∫£ group & channel VIP.
    - Th√™m l·ªánh admin: approve/decline, t·∫°o link, qu·∫£n l√Ω h·∫°n d√πng.
    - B·∫≠t anti-spam cho group (delete link + autoban).
    - ƒêƒÉng k√Ω job cleanup h·∫øt h·∫°n m·ªói ng√†y 03:00 UTC (c√≥ th·ªÉ ch·ªânh).
    """
    # Load subs DB
    _load_members()

    # Join request
    app.add_handler(ChatJoinRequestHandler(on_join_request))

    # Approve/Decline
    app.add_handler(CommandHandler("approve_group", approve_group_cmd))
    app.add_handler(CommandHandler("decline_group", decline_group_cmd))
    app.add_handler(CommandHandler("approve_channel", approve_channel_cmd))
    app.add_handler(CommandHandler("decline_channel", decline_channel_cmd))

    # Invite links
    app.add_handler(CommandHandler("vip_link_group", vip_link_group_cmd))
    app.add_handler(CommandHandler("vip_link_channel", vip_link_channel_cmd))

    # Subs (thu ph√≠/h·∫°n d√πng)
    app.add_handler(CommandHandler("grant", grant_cmd))
    app.add_handler(CommandHandler("revoke", revoke_cmd))
    app.add_handler(CommandHandler("subinfo", subinfo_cmd))
    app.add_handler(CommandHandler("subs_dump", subs_dump_cmd))
    app.add_handler(CommandHandler("subs_reload", subs_reload_cmd))

    # Anti-spam cho group
    app.add_handler(MessageHandler(filters.TEXT | filters.Caption(True), _group_text_handler))

    # Job cleanup h·∫øt h·∫°n ‚Äî 1 l·∫ßn/ng√†y
    if hasattr(app, "job_queue") and app.job_queue:
        # ch·∫°y l√∫c 03:00 UTC m·ªói ng√†y
        target_time = datetime.time(datetime.strptime("03:00", "%H:%M"))
        try:
            app.job_queue.run_daily(_subs_cleanup_job, time=target_time, name="join_gate_cleanup")
        except Exception:
            # fallback: m·ªói 6 gi·ªù
            app.job_queue.run_repeating(_subs_cleanup_job, interval=6*3600, name="join_gate_cleanup_6h")
