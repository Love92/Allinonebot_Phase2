# tg/join_gate.py
# -*- coding: utf-8 -*-
"""
JOIN GATE (Manual Only)
- KH√îNG d√πng join-request t·ª± ƒë·ªông. Ch·ªâ duy·ªát th·ªß c√¥ng:
  ‚Ä¢ Kh√°ch b·∫•m deeplink v√†o bot -> xem h∆∞·ªõng d·∫´n + li√™n h·ªá admin.
  ‚Ä¢ Admin t·∫°o link m·ªùi 1 ng∆∞·ªùi (c√≥ h·∫°n gi·ªù) cho GROUP/CHANNEL: /approvelink_group|channel <user_id> [ph√∫t]
- Anti-spam link trong GROUP (x√≥a/b·∫ª, whitelist domain).
- Kh√¥ng y√™u c·∫ßu JobQueue.

ENV c·∫ßn (ƒë·∫∑t trong .env):
  TELEGRAM_BROADCAST_BOT_TOKEN=<token c·ªßa bot qu·∫£n tr·ªã (v√≠ d·ª• @Doghli_bot)>

  JOIN_GATE_VIP_GROUP_ID=-100xxxxxxxxxx         # chat_id c·ªßa GROUP private
  JOIN_GATE_VIP_CHANNEL_ID=-100yyyyyyyyyy       # chat_id c·ªßa CHANNEL private

  JOIN_GATE_ADMIN_IDS=547597578,7404...         # ID admin ƒë∆∞·ª£c ph√©p ch·∫°y l·ªánh
  JOIN_GATE_ADMIN_CONTACT_USERNAME=Tinh_Nguyen  # username (kh√¥ng @) ƒë·ªÉ hi·ªÉn th·ªã cho kh√°ch
  JOIN_GATE_ADMIN_CONTACT_ID=547597578          # ID admin (ƒë·ªÉ bot c·ªë g·∫Øng DM)
  JOIN_GATE_ADMIN_ALERT_CHAT_ID=547597578       # n∆°i nh·∫≠n th√¥ng b√°o (tu·ª≥ ch·ªçn)

  # Link c·ªë ƒë·ªãnh (ch·ªâ ƒë·ªÉ hi·ªÉn th·ªã tham kh·∫£o, KH√îNG auto d√πng):
  JOIN_GATE_GROUP_STATIC_LINK=https://t.me/+uhxJdHPQRdQ1OTQ1
  JOIN_GATE_CHANNEL_STATIC_LINK=https://t.me/+JmzYHeskihY1NmM1

  # Deeplink d·∫´n kh√°ch v√†o bot (n√™n d√πng c√°i n√†y ƒë·ªÉ kh√°ch ƒë·ªçc h∆∞·ªõng d·∫´n):
  JOIN_GATE_ENTRY_DEEPLINK=https://t.me/AllinoneBot?start=VIP

  # Tin nh·∫Øn DM th√™m cho kh√°ch sau khi /start VIP (tu·ª≥ ch·ªçn):
  JOIN_GATE_DM_TEXT=Chao ban! Vui long lien he admin @Tinh_Nguyen va gui UID/screenshot follow...

  # Anti-spam cho GROUP (m·∫∑c ƒë·ªãnh b·∫≠t):
  JOIN_GATE_ANTISPAM_ON=true
  JOIN_GATE_ALLOW_LINKS=false
  JOIN_GATE_ALLOWED_LINK_DOMAINS=t.me/yourvip,binance.com
  JOIN_GATE_LINK_SPAM_MAX=2
  JOIN_GATE_LINK_SPAM_WINDOW_S=300
  JOIN_GATE_AUTOBAN_ON=true
  JOIN_GATE_AUTODELETE_LINKS=true
"""

from __future__ import annotations

import os, re, time, asyncio
from datetime import datetime
from collections import defaultdict, deque
from typing import Optional, Tuple

from telegram import Bot, Update, constants
from telegram.error import TelegramError
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters


# ---------- Load ENV & defaults ----------
def _env_bool(name: str, default: bool) -> bool:
    v = (os.getenv(name, "").strip() or str(default)).lower()
    return v in ("1","true","yes","on")

def _env_int(name: str, default: int) -> int:
    try:
        return int(os.getenv(name, str(default)))
    except Exception:
        return default

def _parse_admin_ids() -> set[int]:
    s = os.getenv("JOIN_GATE_ADMIN_IDS", "547597578")
    out = set()
    for tok in re.split(r"[,\s]+", s.strip()):
        if not tok: continue
        try: out.add(int(tok))
        except: pass
    return out

GATE_TOKEN = os.getenv("TELEGRAM_BROADCAST_BOT_TOKEN", "")
gate_bot: Optional[Bot] = Bot(GATE_TOKEN) if GATE_TOKEN else None

VIP_GROUP_ID   = _env_int("JOIN_GATE_VIP_GROUP_ID",   0)
VIP_CHANNEL_ID = _env_int("JOIN_GATE_VIP_CHANNEL_ID", 0)

ADMIN_IDS   = _parse_admin_ids()
ADMIN_ALERT = os.getenv("JOIN_GATE_ADMIN_ALERT_CHAT_ID", "").strip()
ADMIN_ALERT_ID = int(ADMIN_ALERT) if ADMIN_ALERT.lstrip("-").isdigit() else None

ADMIN_CONTACT_USERNAME = os.getenv("JOIN_GATE_ADMIN_CONTACT_USERNAME", "Tinh_Nguyen").lstrip("@")
ADMIN_CONTACT_ID       = _env_int("JOIN_GATE_ADMIN_CONTACT_ID", 547597578)

ENTRY_DEEPLINK = os.getenv("JOIN_GATE_ENTRY_DEEPLINK", "https://t.me/AllinoneBot?start=VIP").strip()
GROUP_STATIC_LINK   = os.getenv("JOIN_GATE_GROUP_STATIC_LINK", "https://t.me/+uhxJdHPQRdQ1OTQ1").strip()
CHANNEL_STATIC_LINK = os.getenv("JOIN_GATE_CHANNEL_STATIC_LINK", "https://t.me/+JmzYHeskihY1NmM1").strip()
JOIN_DM_TEXT        = os.getenv("JOIN_GATE_DM_TEXT", "").strip()

# Anti-spam
ANTISPAM_ON  = _env_bool("JOIN_GATE_ANTISPAM_ON", True)
ALLOW_LINKS  = _env_bool("JOIN_GATE_ALLOW_LINKS", False)
WL_DOMAINS   = [d.strip().lower() for d in (os.getenv("JOIN_GATE_ALLOWED_LINK_DOMAINS","") or "").split(",") if d.strip()]
SPAM_MAX     = _env_int("JOIN_GATE_LINK_SPAM_MAX", 2)
SPAM_WINDOW  = _env_int("JOIN_GATE_LINK_SPAM_WINDOW_S", 300)
AUTOBAN_ON   = _env_bool("JOIN_GATE_AUTOBAN_ON", True)
AUTODELETE   = _env_bool("JOIN_GATE_AUTODELETE_LINKS", True)

_URL_RE = re.compile(r"(https?://\S+|t\.me/\S+)", re.IGNORECASE)
_violate: dict[Tuple[int,int], deque] = defaultdict(deque)


# ---------- Utils ----------
def _is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

async def _alert(context: ContextTypes.DEFAULT_TYPE, text: str):
    if not ADMIN_ALERT_ID: return
    try:
        await context.bot.send_message(ADMIN_ALERT_ID, text, parse_mode=constants.ParseMode.HTML, disable_web_page_preview=True)
    except Exception:
        pass

async def _dm_user(uid: int, text: str):
    try:
        if gate_bot:
            await gate_bot.send_message(uid, text, parse_mode=constants.ParseMode.MARKDOWN, disable_web_page_preview=True)
    except Exception:
        pass


# ---------- Commands: entry & help ----------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    uid = update.effective_user.id if update.effective_user else 0

    payload = ""
    try:
        if context.args: payload = (context.args[0] or "").strip().lower()
    except Exception:
        pass

    if payload == "vip":
        guide = [
            "üôã‚Äç‚ôÇÔ∏è Ch√†o b·∫°n! ƒê√¢y l√† c·ªïng v√†o VIP (duy·ªát tay).",
            f"‚Ä¢ Vui l√≤ng li√™n h·ªá admin @{ADMIN_CONTACT_USERNAME} (ID: {ADMIN_CONTACT_ID})",
            "‚Ä¢ G·ª≠i UID/screenshot ƒë√£ follow (Binance/BingX) ho·∫∑c th√¥ng tin copy trade.",
            "‚Ä¢ Sau khi x√°c minh, admin s·∫Ω c·∫•p cho b·∫°n 1 link m·ªùi RI√äNG (ch·ªâ d√πng 1 l·∫ßn, c√≥ h·∫°n gi·ªù).",
            "",
            "‚ÑπÔ∏è Tham kh·∫£o:",
            f"‚Ä¢ Group (KH√îNG d√πng tr·ª±c ti·∫øp): {GROUP_STATIC_LINK}",
            f"‚Ä¢ Channel: {CHANNEL_STATIC_LINK}",
        ]
        await msg.reply_text("\n".join(guide), disable_web_page_preview=True)
        if JOIN_DM_TEXT:
            await _dm_user(uid, JOIN_DM_TEXT)
        if ADMIN_ALERT_ID:
            try:
                uname = update.effective_user.username or f"id={uid}"
                await context.bot.send_message(
                    ADMIN_ALERT_ID,
                    f"üì• Y√™u c·∫ßu VIP m·ªõi t·ª´ <code>{uname}</code> (uid={uid}).",
                    parse_mode=constants.ParseMode.HTML
                )
            except Exception:
                pass
        return

    await msg.reply_text("Xin ch√†o! D√πng /vip_entry ƒë·ªÉ xem c√°ch tham gia VIP (duy·ªát tay).")

async def vip_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    lines = [
        "üîó C√°ch tham gia VIP (duy·ªát tay):",
        f"‚Ä¢ B·∫•m v√†o ƒë√¢y ƒë·ªÉ b·∫Øt ƒë·∫ßu: {ENTRY_DEEPLINK}",
        f"‚Ä¢ Li√™n h·ªá admin @{ADMIN_CONTACT_USERNAME} (ID: {ADMIN_CONTACT_ID}) ƒë·ªÉ ƒë∆∞·ª£c duy·ªát.",
        f"‚Ä¢ (Tham kh·∫£o) Group: {GROUP_STATIC_LINK}",
        f"‚Ä¢ (Tham kh·∫£o) Channel: {CHANNEL_STATIC_LINK}",
    ]
    await msg.reply_text("\n".join(lines), disable_web_page_preview=True)


# ---------- Commands: t·∫°o link m·ªùi 1 ng∆∞·ªùi (manual approval) ----------
async def approvelink_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not _is_admin(update.effective_user.id):
        await msg.reply_text("üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn."); return
    if gate_bot is None:
        await msg.reply_text("‚ùå Ch∆∞a c·∫•u h√¨nh TELEGRAM_BROADCAST_BOT_TOKEN."); return
    if not VIP_GROUP_ID:
        await msg.reply_text("‚ùå Thi·∫øu JOIN_GATE_VIP_GROUP_ID."); return
    if not context.args:
        await msg.reply_text("D√πng: /approvelink_group <user_id> [minutes_valid=120]"); return

    try:
        target  = int(context.args[0])
        minutes = int(context.args[1]) if len(context.args) >= 2 else 120
        minutes = max(1, minutes)
        expire_ts = int(time.time()) + minutes * 60

        link = await gate_bot.create_chat_invite_link(
            chat_id=VIP_GROUP_ID,
            name=f"VIP GROUP for {target}",
            member_limit=1,
            expire_date=expire_ts,
            creates_join_request=False  # v√†o th·∫≥ng v√¨ ƒë√£ duy·ªát tay
        )
        txt = (f"‚úÖ Link m·ªùi GROUP (1 ng∆∞·ªùi, h·∫øt h·∫°n {minutes}'): {link.invite_link}\n"
               f"‚Üí G·ª¨I tr·ª±c ti·∫øp cho <code>{target}</code>.")
        await msg.reply_text(txt, parse_mode=constants.ParseMode.HTML, disable_web_page_preview=True)

        # c·ªë g·∫Øng DM lu√¥n cho user
        try:
            await context.bot.send_message(
                chat_id=target,
                text=f"üéüÔ∏è Link v√†o GROUP VIP (h·∫øt h·∫°n {minutes}'): {link.invite_link}",
                disable_web_page_preview=True
            )
        except Exception:
            pass
    except TelegramError as e:
        await msg.reply_text(f"‚ùå L·ªói t·∫°o link: {e.message}")
    except Exception as e:
        await msg.reply_text(f"‚ùå L·ªói t·∫°o link: {e}")

async def approvelink_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not _is_admin(update.effective_user.id):
        await msg.reply_text("üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn."); return
    if gate_bot is None:
        await msg.reply_text("‚ùå Ch∆∞a c·∫•u h√¨nh TELEGRAM_BROADCAST_BOT_TOKEN."); return
    if not VIP_CHANNEL_ID:
        await msg.reply_text("‚ùå Thi·∫øu JOIN_GATE_VIP_CHANNEL_ID."); return
    if not context.args:
        await msg.reply_text("D√πng: /approvelink_channel <user_id> [minutes_valid=120]"); return

    try:
        target  = int(context.args[0])
        minutes = int(context.args[1]) if len(context.args) >= 2 else 120
        minutes = max(1, minutes)
        expire_ts = int(time.time()) + minutes * 60

        link = await gate_bot.create_chat_invite_link(
            chat_id=VIP_CHANNEL_ID,
            name=f"VIP CHANNEL for {target}",
            member_limit=1,
            expire_date=expire_ts,
            creates_join_request=False
        )
        txt = (f"‚úÖ Link m·ªùi CHANNEL (1 ng∆∞·ªùi, h·∫øt h·∫°n {minutes}'): {link.invite_link}\n"
               f"‚Üí G·ª¨I tr·ª±c ti·∫øp cho <code>{target}</code>.")
        await msg.reply_text(txt, parse_mode=constants.ParseMode.HTML, disable_web_page_preview=True)

        try:
            await context.bot.send_message(
                chat_id=target,
                text=f"üì£ Link v√†o CHANNEL VIP (h·∫øt h·∫°n {minutes}'): {link.invite_link}",
                disable_web_page_preview=True
            )
        except Exception:
            pass
    except TelegramError as e:
        await msg.reply_text(f"‚ùå L·ªói t·∫°o link: {e.message}")
    except Exception as e:
        await msg.reply_text(f"‚ùå L·ªói t·∫°o link: {e}")


# ---------- Anti-spam cho GROUP ----------
def _is_allowed_link(text: str) -> bool:
    if ALLOW_LINKS:
        # cho ph√©p link, nh∆∞ng n·∫øu c√≥ whitelist th√¨ v·∫´n ∆∞u ti√™n whitelist
        if not WL_DOMAINS:
            return True
    low = text.lower()
    return any(dom in low for dom in WL_DOMAINS)

async def _moderate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ANTISPAM_ON: return
    chat = update.effective_chat
    msg  = update.effective_message
    if not chat or chat.id != VIP_GROUP_ID: return
    if not msg: return

    text = (msg.text or msg.caption or "")
    if not _URL_RE.search(text): return

    if _is_allowed_link(text): return

    # Vi ph·∫°m
    if AUTODELETE:
        try: await msg.delete()
        except Exception: pass

    key = (chat.id, msg.from_user.id if msg.from_user else 0)
    dq  = _violate[key]
    now = time.time()
    dq.append(now)
    while dq and now - dq[0] > SPAM_WINDOW:
        dq.popleft()

    if AUTOBAN_ON and len(dq) >= SPAM_MAX:
        try:
            if gate_bot:
                await gate_bot.ban_chat_member(chat_id=chat.id, user_id=key[1])
                try:
                    await gate_bot.unban_chat_member(chat_id=chat.id, user_id=key[1], only_if_banned=True)
                except Exception:
                    pass
        except Exception:
            pass
        dq.clear()
        await _alert(context, f"üö´ Auto-ban v√¨ spam link: <code>{key[1]}</code> (group)")


# ---------- Public API ----------
def register_join_gate(app: Application) -> None:
    """
    G·ªçi trong main.py sau khi build app:
        from tg.join_gate import register_join_gate
        register_join_gate(app)
    """
    # H∆∞·ªõng d·∫´n
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("vip_entry", vip_entry))

    # T·∫°o link m·ªùi 1 ng∆∞·ªùi (duy·ªát tay)
    app.add_handler(CommandHandler("approvelink_group",   approvelink_group))
    app.add_handler(CommandHandler("approvelink_channel", approvelink_channel))

    # Anti-spam GROUP
    app.add_handler(MessageHandler(filters.ALL, _moderate), group=21)
